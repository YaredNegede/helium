{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport mergeClassNames from 'merge-class-names';\nimport { getHours, getMinutes, getSeconds } from '@wojtekmaj/date-utils';\nimport Hand from './Hand';\nimport MinuteMark from './MinuteMark';\nimport HourMark from './HourMark';\nimport { isHandLength, isOppositeHandLength, isHandWidth, isMarkLength, isMarkWidth } from './shared/propTypes';\nexport default function Clock(_ref) {\n  var className = _ref.className,\n      formatHour = _ref.formatHour,\n      _ref$hourHandLength = _ref.hourHandLength,\n      hourHandLength = _ref$hourHandLength === void 0 ? 50 : _ref$hourHandLength,\n      hourHandOppositeLength = _ref.hourHandOppositeLength,\n      _ref$hourHandWidth = _ref.hourHandWidth,\n      hourHandWidth = _ref$hourHandWidth === void 0 ? 4 : _ref$hourHandWidth,\n      _ref$hourMarksLength = _ref.hourMarksLength,\n      hourMarksLength = _ref$hourMarksLength === void 0 ? 10 : _ref$hourMarksLength,\n      _ref$hourMarksWidth = _ref.hourMarksWidth,\n      hourMarksWidth = _ref$hourMarksWidth === void 0 ? 3 : _ref$hourMarksWidth,\n      locale = _ref.locale,\n      _ref$minuteHandLength = _ref.minuteHandLength,\n      minuteHandLength = _ref$minuteHandLength === void 0 ? 70 : _ref$minuteHandLength,\n      minuteHandOppositeLength = _ref.minuteHandOppositeLength,\n      _ref$minuteHandWidth = _ref.minuteHandWidth,\n      minuteHandWidth = _ref$minuteHandWidth === void 0 ? 2 : _ref$minuteHandWidth,\n      _ref$minuteMarksLengt = _ref.minuteMarksLength,\n      minuteMarksLength = _ref$minuteMarksLengt === void 0 ? 6 : _ref$minuteMarksLengt,\n      _ref$minuteMarksWidth = _ref.minuteMarksWidth,\n      minuteMarksWidth = _ref$minuteMarksWidth === void 0 ? 1 : _ref$minuteMarksWidth,\n      _ref$renderHourMarks = _ref.renderHourMarks,\n      renderHourMarks = _ref$renderHourMarks === void 0 ? true : _ref$renderHourMarks,\n      _ref$renderMinuteHand = _ref.renderMinuteHand,\n      renderMinuteHand = _ref$renderMinuteHand === void 0 ? true : _ref$renderMinuteHand,\n      _ref$renderMinuteMark = _ref.renderMinuteMarks,\n      renderMinuteMarks = _ref$renderMinuteMark === void 0 ? true : _ref$renderMinuteMark,\n      renderNumbers = _ref.renderNumbers,\n      _ref$renderSecondHand = _ref.renderSecondHand,\n      renderSecondHand = _ref$renderSecondHand === void 0 ? true : _ref$renderSecondHand,\n      _ref$secondHandLength = _ref.secondHandLength,\n      secondHandLength = _ref$secondHandLength === void 0 ? 90 : _ref$secondHandLength,\n      secondHandOppositeLength = _ref.secondHandOppositeLength,\n      _ref$secondHandWidth = _ref.secondHandWidth,\n      secondHandWidth = _ref$secondHandWidth === void 0 ? 1 : _ref$secondHandWidth,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 150 : _ref$size,\n      value = _ref.value;\n\n  function renderMinuteMarksFn() {\n    if (!renderMinuteMarks) {\n      return null;\n    }\n\n    var minuteMarks = [];\n\n    for (var i = 1; i <= 60; i += 1) {\n      var isHourMark = renderHourMarks && !(i % 5);\n\n      if (!isHourMark) {\n        minuteMarks.push( /*#__PURE__*/React.createElement(MinuteMark, {\n          key: \"minute_\".concat(i),\n          angle: i * 6,\n          length: minuteMarksLength,\n          name: \"minute\",\n          width: minuteMarksWidth\n        }));\n      }\n    }\n\n    return minuteMarks;\n  }\n\n  function renderHourMarksFn() {\n    if (!renderHourMarks) {\n      return null;\n    }\n\n    var hourMarks = [];\n\n    for (var i = 1; i <= 12; i += 1) {\n      hourMarks.push( /*#__PURE__*/React.createElement(HourMark, {\n        key: \"hour_\".concat(i),\n        angle: i * 30,\n        formatHour: formatHour,\n        length: hourMarksLength,\n        locale: locale,\n        name: \"hour\",\n        number: renderNumbers ? i : null,\n        width: hourMarksWidth\n      }));\n    }\n\n    return hourMarks;\n  }\n\n  function renderFace() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"react-clock__face\"\n    }, renderMinuteMarksFn(), renderHourMarksFn());\n  }\n\n  function renderHourHandFn() {\n    var angle = value ? getHours(value) * 30 + getMinutes(value) / 2 + getSeconds(value) / 600 : 0;\n    return /*#__PURE__*/React.createElement(Hand, {\n      angle: angle,\n      length: hourHandLength,\n      name: \"hour\",\n      oppositeLength: hourHandOppositeLength,\n      width: hourHandWidth\n    });\n  }\n\n  function renderMinuteHandFn() {\n    if (!renderMinuteHand) {\n      return null;\n    }\n\n    var angle = value ? getHours(value) * 360 + getMinutes(value) * 6 + getSeconds(value) / 10 : 0;\n    return /*#__PURE__*/React.createElement(Hand, {\n      angle: angle,\n      length: minuteHandLength,\n      name: \"minute\",\n      oppositeLength: minuteHandOppositeLength,\n      width: minuteHandWidth\n    });\n  }\n\n  function renderSecondHandFn() {\n    if (!renderSecondHand) {\n      return null;\n    }\n\n    var angle = value ? getMinutes(value) * 360 + getSeconds(value) * 6 : 0;\n    return /*#__PURE__*/React.createElement(Hand, {\n      angle: angle,\n      length: secondHandLength,\n      name: \"second\",\n      oppositeLength: secondHandOppositeLength,\n      width: secondHandWidth\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"time\", {\n    className: mergeClassNames('react-clock', className),\n    dateTime: value instanceof Date ? value.toISOString() : value,\n    style: {\n      width: \"\".concat(size, \"px\"),\n      height: \"\".concat(size, \"px\")\n    }\n  }, renderFace(), renderHourHandFn(), renderMinuteHandFn(), renderSecondHandFn());\n}\nClock.propTypes = {\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  formatHour: PropTypes.func,\n  hourHandLength: isHandLength,\n  hourHandOppositeLength: isOppositeHandLength,\n  hourHandWidth: isHandWidth,\n  hourMarksLength: isMarkLength,\n  hourMarksWidth: isMarkWidth,\n  locale: PropTypes.string,\n  minuteHandLength: isHandLength,\n  minuteHandOppositeLength: isOppositeHandLength,\n  minuteHandWidth: isHandWidth,\n  minuteMarksLength: isMarkLength,\n  minuteMarksWidth: isMarkWidth,\n  renderHourMarks: PropTypes.bool,\n  renderMinuteHand: PropTypes.bool,\n  renderMinuteMarks: PropTypes.bool,\n  renderNumbers: PropTypes.bool,\n  renderSecondHand: PropTypes.bool,\n  secondHandLength: isHandLength,\n  secondHandOppositeLength: isOppositeHandLength,\n  secondHandWidth: isHandWidth,\n  size: PropTypes.number,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)])\n};","map":null,"metadata":{},"sourceType":"module"}