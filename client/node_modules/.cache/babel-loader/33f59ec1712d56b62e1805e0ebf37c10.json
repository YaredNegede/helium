{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nimport { isDefined } from './utils';\n\nvar isNumberBetween = function isNumberBetween(min, max) {\n  return function (props, propName, componentName) {\n    var value = props[propName];\n\n    if (isDefined(value)) {\n      if (typeof value !== 'number') {\n        return new Error(\"Invalid prop `\".concat(propName, \"` of type `\").concat(_typeof(value), \"` supplied to `\").concat(componentName, \"`, expected `number`.\"));\n      }\n\n      if (value < min || value > max) {\n        return new Error(\"Invalid prop `\".concat(propName, \"` of type `\").concat(_typeof(value), \"` supplied to `\").concat(componentName, \"`, length must be between \").concat(min, \" and \").concat(max, \".\"));\n      }\n    } // Everything is fine\n\n\n    return null;\n  };\n};\n\nexport var isHandLength = isNumberBetween(0, 100);\nexport var isOppositeHandLength = isNumberBetween(-100, 100);\nexport var isHandWidth = function isHandWidth(props, propName, componentName) {\n  var width = props[propName];\n\n  if (isDefined(width)) {\n    if (typeof width !== 'number') {\n      return new Error(\"Invalid prop `\".concat(propName, \"` of type `\").concat(_typeof(width), \"` supplied to `\").concat(componentName, \"`, expected `number`.\"));\n    }\n\n    if (width < 0) {\n      return new Error(\"Invalid prop `\".concat(propName, \"` of type `\").concat(_typeof(width), \"` supplied to `\").concat(componentName, \"`, width must be greater or equal to 0.\"));\n    }\n  } // Everything is fine\n\n\n  return null;\n};\nexport var isMarkLength = isHandLength;\nexport var isMarkWidth = isHandWidth;","map":null,"metadata":{},"sourceType":"module"}