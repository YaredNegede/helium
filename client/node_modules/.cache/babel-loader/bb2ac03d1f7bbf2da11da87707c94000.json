{"ast":null,"code":"import _objectSpread from '@babel/runtime/helpers/esm/objectSpread2';\nimport _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';\nimport _typeof from '@babel/runtime/helpers/esm/typeof';\nimport _classCallCheck from '@babel/runtime/helpers/esm/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/esm/createClass';\nimport _inherits from '@babel/runtime/helpers/esm/inherits';\nimport _createSuper from '@babel/runtime/helpers/esm/createSuper';\nimport React, { createRef, Component, useMemo, useState, useEffect, useCallback, useRef } from 'react';\nimport { uncontrollable } from 'uncontrollable';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport invariant from 'invariant';\nimport * as dates from 'date-arithmetic';\nimport { inRange as inRange$1, lt, lte, gt, gte, eq, neq, startOf, endOf, add, min, max, minutes } from 'date-arithmetic';\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport _toConsumableArray from '@babel/runtime/helpers/esm/toConsumableArray';\nimport chunk from 'lodash-es/chunk';\nimport getPosition from 'dom-helpers/position';\nimport * as animationFrame from 'dom-helpers/animationFrame';\nimport getOffset from 'dom-helpers/offset';\nimport getScrollTop from 'dom-helpers/scrollTop';\nimport getScrollLeft from 'dom-helpers/scrollLeft';\nimport isEqual$1 from 'lodash-es/isEqual';\nimport Overlay from 'react-overlays/Overlay';\nimport getHeight from 'dom-helpers/height';\nimport qsa from 'dom-helpers/querySelectorAll';\nimport contains from 'dom-helpers/contains';\nimport closest from 'dom-helpers/closest';\nimport listen from 'dom-helpers/listen';\nimport findIndex from 'lodash-es/findIndex';\nimport range$1 from 'lodash-es/range';\nimport memoize from 'memoize-one';\nimport _slicedToArray from '@babel/runtime/helpers/esm/slicedToArray';\nimport _assertThisInitialized from '@babel/runtime/helpers/esm/assertThisInitialized';\nimport sortBy from 'lodash-es/sortBy';\nimport getWidth from 'dom-helpers/width';\nimport scrollbarSize from 'dom-helpers/scrollbarSize';\nimport _toArray from '@babel/runtime/helpers/esm/toArray';\nimport addClass from 'dom-helpers/addClass';\nimport removeClass from 'dom-helpers/removeClass';\nimport omit from 'lodash-es/omit';\nimport defaults from 'lodash-es/defaults';\nimport transform from 'lodash-es/transform';\nimport mapValues from 'lodash-es/mapValues';\n\nfunction NoopWrapper(props) {\n  return props.children;\n}\n\nvar navigate = {\n  PREVIOUS: 'PREV',\n  NEXT: 'NEXT',\n  TODAY: 'TODAY',\n  DATE: 'DATE'\n};\nvar views = {\n  MONTH: 'month',\n  WEEK: 'week',\n  WORK_WEEK: 'work_week',\n  DAY: 'day',\n  AGENDA: 'agenda'\n};\nvar viewNames$1 = Object.keys(views).map(function (k) {\n  return views[k];\n});\nPropTypes.oneOfType([PropTypes.string, PropTypes.func]);\nPropTypes.any;\nPropTypes.func;\n/**\n * accepts either an array of builtin view names:\n *\n * ```\n * views={['month', 'day', 'agenda']}\n * ```\n *\n * or an object hash of the view name and the component (or boolean for builtin)\n *\n * ```\n * views={{\n *   month: true,\n *   week: false,\n *   workweek: WorkWeekViewComponent,\n * }}\n * ```\n */\n\nPropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOf(viewNames$1)), PropTypes.objectOf(function (prop, key) {\n  var isBuiltinView = viewNames$1.indexOf(key) !== -1 && typeof prop[key] === 'boolean';\n\n  if (isBuiltinView) {\n    return null;\n  } else {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    return PropTypes.elementType.apply(PropTypes, [prop, key].concat(args));\n  }\n})]);\nPropTypes.oneOfType([PropTypes.oneOf(['overlap', 'no-overlap']), PropTypes.func]);\n\nfunction notify(handler, args) {\n  handler && handler.apply(null, [].concat(args));\n}\n/* eslint no-fallthrough: off */\n\n\nvar MILLI = {\n  seconds: 1000,\n  minutes: 1000 * 60,\n  hours: 1000 * 60 * 60,\n  day: 1000 * 60 * 60 * 24\n};\n\nfunction firstVisibleDay(date, localizer) {\n  var firstOfMonth = dates.startOf(date, 'month');\n  return dates.startOf(firstOfMonth, 'week', localizer.startOfWeek());\n}\n\nfunction lastVisibleDay(date, localizer) {\n  var endOfMonth = dates.endOf(date, 'month');\n  return dates.endOf(endOfMonth, 'week', localizer.startOfWeek());\n}\n\nfunction visibleDays(date, localizer) {\n  var current = firstVisibleDay(date, localizer),\n      last = lastVisibleDay(date, localizer),\n      days = [];\n\n  while (dates.lte(current, last, 'day')) {\n    days.push(current);\n    current = dates.add(current, 1, 'day');\n  }\n\n  return days;\n}\n\nfunction ceil(date, unit) {\n  var floor = dates.startOf(date, unit);\n  return dates.eq(floor, date) ? floor : dates.add(floor, 1, unit);\n}\n\nfunction range(start, end) {\n  var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'day';\n  var current = start,\n      days = [];\n\n  while (dates.lte(current, end, unit)) {\n    days.push(current);\n    current = dates.add(current, 1, unit);\n  }\n\n  return days;\n}\n\nfunction merge(date, time) {\n  if (time == null && date == null) return null;\n  if (time == null) time = new Date();\n  if (date == null) date = new Date();\n  date = dates.startOf(date, 'day');\n  date = dates.hours(date, dates.hours(time));\n  date = dates.minutes(date, dates.minutes(time));\n  date = dates.seconds(date, dates.seconds(time));\n  return dates.milliseconds(date, dates.milliseconds(time));\n}\n\nfunction isJustDate(date) {\n  return dates.hours(date) === 0 && dates.minutes(date) === 0 && dates.seconds(date) === 0 && dates.milliseconds(date) === 0;\n}\n\nfunction diff(dateA, dateB, unit) {\n  if (!unit || unit === 'milliseconds') return Math.abs(+dateA - +dateB); // the .round() handles an edge case\n  // with DST where the total won't be exact\n  // since one day in the range may be shorter/longer by an hour\n\n  return Math.round(Math.abs(+dates.startOf(dateA, unit) / MILLI[unit] - +dates.startOf(dateB, unit) / MILLI[unit]));\n}\n\nvar localePropType = PropTypes.oneOfType([PropTypes.string, PropTypes.func]);\n\nfunction _format(localizer, formatter, value, format, culture) {\n  var result = typeof format === 'function' ? format(value, culture, localizer) : formatter.call(localizer, value, format, culture);\n  invariant(result == null || typeof result === 'string', '`localizer format(..)` must return a string, null, or undefined');\n  return result;\n}\n/**\n * This date conversion was moved out of TimeSlots.js, to\n * allow for localizer override\n * @param {Date} dt - The date to start from\n * @param {Number} minutesFromMidnight\n * @param {Number} offset\n * @returns {Date}\n */\n\n\nfunction getSlotDate(dt, minutesFromMidnight, offset) {\n  return new Date(dt.getFullYear(), dt.getMonth(), dt.getDate(), 0, minutesFromMidnight + offset, 0, 0);\n}\n\nfunction getDstOffset(start, end) {\n  return start.getTimezoneOffset() - end.getTimezoneOffset();\n} // if the start is on a DST-changing day but *after* the moment of DST\n// transition we need to add those extra minutes to our minutesFromMidnight\n\n\nfunction getTotalMin(start, end) {\n  return diff(start, end, 'minutes') + getDstOffset(start, end);\n}\n\nfunction getMinutesFromMidnight(start) {\n  var daystart = startOf(start, 'day');\n  return diff(daystart, start, 'minutes') + getDstOffset(daystart, start);\n} // These two are used by DateSlotMetrics\n\n\nfunction continuesPrior(start, first) {\n  return lt(start, first, 'day');\n}\n\nfunction continuesAfter(start, end, last) {\n  var singleDayDuration = eq(start, end, 'minutes');\n  return singleDayDuration ? gte(end, last, 'minutes') : gt(end, last, 'minutes');\n} // These two are used by eventLevels\n\n\nfunction sortEvents$1(_ref) {\n  var _ref$evtA = _ref.evtA,\n      aStart = _ref$evtA.start,\n      aEnd = _ref$evtA.end,\n      aAllDay = _ref$evtA.allDay,\n      _ref$evtB = _ref.evtB,\n      bStart = _ref$evtB.start,\n      bEnd = _ref$evtB.end,\n      bAllDay = _ref$evtB.allDay;\n  var startSort = +startOf(aStart, 'day') - +startOf(bStart, 'day');\n  var durA = diff(aStart, ceil(aEnd, 'day'), 'day');\n  var durB = diff(bStart, ceil(bEnd, 'day'), 'day');\n  return startSort || // sort by start Day first\n  Math.max(durB, 1) - Math.max(durA, 1) || // events spanning multiple days go first\n  !!bAllDay - !!aAllDay || // then allDay single day events\n  +aStart - +bStart || // then sort by start time\n  +aEnd - +bEnd // then sort by end time\n  ;\n}\n\nfunction inEventRange(_ref2) {\n  var _ref2$event = _ref2.event,\n      start = _ref2$event.start,\n      end = _ref2$event.end,\n      _ref2$range = _ref2.range,\n      rangeStart = _ref2$range.start,\n      rangeEnd = _ref2$range.end;\n  var eStart = startOf(start, 'day');\n  var startsBeforeEnd = lte(eStart, rangeEnd, 'day'); // when the event is zero duration we need to handle a bit differently\n\n  var sameMin = neq(eStart, end, 'minutes');\n  var endsAfterStart = sameMin ? gt(end, rangeStart, 'minutes') : gte(end, rangeStart, 'minutes');\n  return startsBeforeEnd && endsAfterStart;\n} // other localizers treats 'day' and 'date' equality very differently, so we\n// abstract the change the 'localizer.eq(date1, date2, 'day') into this\n// new method, where they can be treated correctly by the localizer overrides\n\n\nfunction isSameDate(date1, date2) {\n  return eq(date1, date2, 'day');\n}\n\nfunction startAndEndAreDateOnly(start, end) {\n  return isJustDate(start) && isJustDate(end);\n}\n\nvar DateLocalizer = /*#__PURE__*/_createClass(function DateLocalizer(spec) {\n  var _this = this;\n\n  _classCallCheck(this, DateLocalizer);\n\n  invariant(typeof spec.format === 'function', 'date localizer `format(..)` must be a function');\n  invariant(typeof spec.firstOfWeek === 'function', 'date localizer `firstOfWeek(..)` must be a function');\n  this.propType = spec.propType || localePropType;\n  this.formats = spec.formats;\n\n  this.format = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _format.apply(void 0, [_this, spec.format].concat(args));\n  }; // These date arithmetic methods can be overriden by the localizer\n\n\n  this.startOfWeek = spec.firstOfWeek;\n  this.merge = spec.merge || merge;\n  this.inRange = spec.inRange || inRange$1;\n  this.lt = spec.lt || lt;\n  this.lte = spec.lte || lte;\n  this.gt = spec.gt || gt;\n  this.gte = spec.gte || gte;\n  this.eq = spec.eq || eq;\n  this.neq = spec.neq || neq;\n  this.startOf = spec.startOf || startOf;\n  this.endOf = spec.endOf || endOf;\n  this.add = spec.add || add;\n  this.range = spec.range || range;\n  this.diff = spec.diff || diff;\n  this.ceil = spec.ceil || ceil;\n  this.min = spec.min || min;\n  this.max = spec.max || max;\n  this.minutes = spec.minutes || minutes;\n  this.firstVisibleDay = spec.firstVisibleDay || firstVisibleDay;\n  this.lastVisibleDay = spec.lastVisibleDay || lastVisibleDay;\n  this.visibleDays = spec.visibleDays || visibleDays;\n  this.getSlotDate = spec.getSlotDate || getSlotDate;\n\n  this.getTimezoneOffset = spec.getTimezoneOffset || function (value) {\n    return value.getTimezoneOffset();\n  };\n\n  this.getDstOffset = spec.getDstOffset || getDstOffset;\n  this.getTotalMin = spec.getTotalMin || getTotalMin;\n  this.getMinutesFromMidnight = spec.getMinutesFromMidnight || getMinutesFromMidnight;\n  this.continuesPrior = spec.continuesPrior || continuesPrior;\n  this.continuesAfter = spec.continuesAfter || continuesAfter;\n  this.sortEvents = spec.sortEvents || sortEvents$1;\n  this.inEventRange = spec.inEventRange || inEventRange;\n  this.isSameDate = spec.isSameDate || isSameDate;\n  this.startAndEndAreDateOnly = spec.startAndEndAreDateOnly || startAndEndAreDateOnly;\n  this.segmentOffset = spec.browserTZOffset ? spec.browserTZOffset() : 0;\n});\n\nfunction mergeWithDefaults(localizer, culture, formatOverrides, messages) {\n  var formats = _objectSpread(_objectSpread({}, localizer.formats), formatOverrides);\n\n  return _objectSpread(_objectSpread({}, localizer), {}, {\n    messages: messages,\n    startOfWeek: function startOfWeek() {\n      return localizer.startOfWeek(culture);\n    },\n    format: function format(value, _format2) {\n      return localizer.format(value, formats[_format2] || _format2, culture);\n    }\n  });\n}\n\nvar defaultMessages = {\n  date: 'Date',\n  time: 'Time',\n  event: 'Event',\n  allDay: 'All Day',\n  week: 'Week',\n  work_week: 'Work Week',\n  day: 'Day',\n  month: 'Month',\n  previous: 'Back',\n  next: 'Next',\n  yesterday: 'Yesterday',\n  tomorrow: 'Tomorrow',\n  today: 'Today',\n  agenda: 'Agenda',\n  noEventsInRange: 'There are no events in this range.',\n  showMore: function showMore(total) {\n    return \"+\".concat(total, \" more\");\n  }\n};\n\nfunction messages(msgs) {\n  return _objectSpread(_objectSpread({}, defaultMessages), msgs);\n}\n\nvar _excluded$7 = [\"style\", \"className\", \"event\", \"selected\", \"isAllDay\", \"onSelect\", \"onDoubleClick\", \"onKeyPress\", \"localizer\", \"continuesPrior\", \"continuesAfter\", \"accessors\", \"getters\", \"children\", \"components\", \"slotStart\", \"slotEnd\"];\n\nvar EventCell = /*#__PURE__*/function (_React$Component) {\n  _inherits(EventCell, _React$Component);\n\n  var _super = _createSuper(EventCell);\n\n  function EventCell() {\n    _classCallCheck(this, EventCell);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(EventCell, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          style = _this$props.style,\n          className = _this$props.className,\n          event = _this$props.event,\n          selected = _this$props.selected,\n          isAllDay = _this$props.isAllDay,\n          onSelect = _this$props.onSelect,\n          _onDoubleClick = _this$props.onDoubleClick,\n          _onKeyPress = _this$props.onKeyPress,\n          localizer = _this$props.localizer,\n          continuesPrior = _this$props.continuesPrior,\n          continuesAfter = _this$props.continuesAfter,\n          accessors = _this$props.accessors,\n          getters = _this$props.getters,\n          children = _this$props.children,\n          _this$props$component = _this$props.components,\n          Event = _this$props$component.event,\n          EventWrapper = _this$props$component.eventWrapper,\n          slotStart = _this$props.slotStart,\n          slotEnd = _this$props.slotEnd,\n          props = _objectWithoutProperties(_this$props, _excluded$7);\n\n      delete props.resizable;\n      var title = accessors.title(event);\n      var tooltip = accessors.tooltip(event);\n      var end = accessors.end(event);\n      var start = accessors.start(event);\n      var allDay = accessors.allDay(event);\n      var showAsAllDay = isAllDay || allDay || localizer.diff(start, localizer.ceil(end, 'day'), 'day') > 1;\n      var userProps = getters.eventProp(event, start, end, selected);\n      var content = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"rbc-event-content\",\n        title: tooltip || undefined\n      }, Event ? /*#__PURE__*/React.createElement(Event, {\n        event: event,\n        continuesPrior: continuesPrior,\n        continuesAfter: continuesAfter,\n        title: title,\n        isAllDay: allDay,\n        localizer: localizer,\n        slotStart: slotStart,\n        slotEnd: slotEnd\n      }) : title);\n      return /*#__PURE__*/React.createElement(EventWrapper, Object.assign({}, this.props, {\n        type: \"date\"\n      }), /*#__PURE__*/React.createElement(\"div\", Object.assign({}, props, {\n        tabIndex: 0,\n        style: _objectSpread(_objectSpread({}, userProps.style), style),\n        className: clsx('rbc-event', className, userProps.className, {\n          'rbc-selected': selected,\n          'rbc-event-allday': showAsAllDay,\n          'rbc-event-continues-prior': continuesPrior,\n          'rbc-event-continues-after': continuesAfter\n        }),\n        onClick: function onClick(e) {\n          return onSelect && onSelect(event, e);\n        },\n        onDoubleClick: function onDoubleClick(e) {\n          return _onDoubleClick && _onDoubleClick(event, e);\n        },\n        onKeyPress: function onKeyPress(e) {\n          return _onKeyPress && _onKeyPress(event, e);\n        }\n      }), typeof children === 'function' ? children(content) : content));\n    }\n  }]);\n\n  return EventCell;\n}(React.Component);\n\nfunction isSelected(event, selected) {\n  if (!event || selected == null) return false;\n  return isEqual$1(event, selected);\n}\n\nfunction slotWidth(rowBox, slots) {\n  var rowWidth = rowBox.right - rowBox.left;\n  var cellWidth = rowWidth / slots;\n  return cellWidth;\n}\n\nfunction getSlotAtX(rowBox, x, rtl, slots) {\n  var cellWidth = slotWidth(rowBox, slots);\n  return rtl ? slots - 1 - Math.floor((x - rowBox.left) / cellWidth) : Math.floor((x - rowBox.left) / cellWidth);\n}\n\nfunction pointInBox(box, _ref) {\n  var x = _ref.x,\n      y = _ref.y;\n  return y >= box.top && y <= box.bottom && x >= box.left && x <= box.right;\n}\n\nfunction dateCellSelection(start, rowBox, box, slots, rtl) {\n  var startIdx = -1;\n  var endIdx = -1;\n  var lastSlotIdx = slots - 1;\n  var cellWidth = slotWidth(rowBox, slots); // cell under the mouse\n\n  var currentSlot = getSlotAtX(rowBox, box.x, rtl, slots); // Identify row as either the initial row\n  // or the row under the current mouse point\n\n  var isCurrentRow = rowBox.top < box.y && rowBox.bottom > box.y;\n  var isStartRow = rowBox.top < start.y && rowBox.bottom > start.y; // this row's position relative to the start point\n\n  var isAboveStart = start.y > rowBox.bottom;\n  var isBelowStart = rowBox.top > start.y;\n  var isBetween = box.top < rowBox.top && box.bottom > rowBox.bottom; // this row is between the current and start rows, so entirely selected\n\n  if (isBetween) {\n    startIdx = 0;\n    endIdx = lastSlotIdx;\n  }\n\n  if (isCurrentRow) {\n    if (isBelowStart) {\n      startIdx = 0;\n      endIdx = currentSlot;\n    } else if (isAboveStart) {\n      startIdx = currentSlot;\n      endIdx = lastSlotIdx;\n    }\n  }\n\n  if (isStartRow) {\n    // select the cell under the initial point\n    startIdx = endIdx = rtl ? lastSlotIdx - Math.floor((start.x - rowBox.left) / cellWidth) : Math.floor((start.x - rowBox.left) / cellWidth);\n\n    if (isCurrentRow) {\n      if (currentSlot < startIdx) startIdx = currentSlot;else endIdx = currentSlot; //select current range\n    } else if (start.y < box.y) {\n      // the current row is below start row\n      // select cells to the right of the start cell\n      endIdx = lastSlotIdx;\n    } else {\n      // select cells to the left of the start cell\n      startIdx = 0;\n    }\n  }\n\n  return {\n    startIdx: startIdx,\n    endIdx: endIdx\n  };\n}\n\nvar Popup = /*#__PURE__*/function (_React$Component) {\n  _inherits(Popup, _React$Component);\n\n  var _super = _createSuper(Popup);\n\n  function Popup() {\n    _classCallCheck(this, Popup);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Popup, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          _this$props$popupOffs = _this$props.popupOffset,\n          popupOffset = _this$props$popupOffs === void 0 ? 5 : _this$props$popupOffs,\n          popperRef = _this$props.popperRef,\n          _getOffset = getOffset(popperRef.current),\n          top = _getOffset.top,\n          left = _getOffset.left,\n          width = _getOffset.width,\n          height = _getOffset.height,\n          viewBottom = window.innerHeight + getScrollTop(window),\n          viewRight = window.innerWidth + getScrollLeft(window),\n          bottom = top + height,\n          right = left + width;\n\n      if (bottom > viewBottom || right > viewRight) {\n        var topOffset, leftOffset;\n        if (bottom > viewBottom) topOffset = bottom - viewBottom + (popupOffset.y || +popupOffset || 0);\n        if (right > viewRight) leftOffset = right - viewRight + (popupOffset.x || +popupOffset || 0);\n        this.setState({\n          topOffset: topOffset,\n          leftOffset: leftOffset\n        }); //eslint-disable-line\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props2 = this.props,\n          events = _this$props2.events,\n          selected = _this$props2.selected,\n          getters = _this$props2.getters,\n          accessors = _this$props2.accessors,\n          components = _this$props2.components,\n          onSelect = _this$props2.onSelect,\n          onDoubleClick = _this$props2.onDoubleClick,\n          onKeyPress = _this$props2.onKeyPress,\n          slotStart = _this$props2.slotStart,\n          slotEnd = _this$props2.slotEnd,\n          localizer = _this$props2.localizer,\n          popperRef = _this$props2.popperRef;\n      var width = this.props.position.width,\n          topOffset = (this.state || {}).topOffset || 0,\n          leftOffset = (this.state || {}).leftOffset || 0;\n      var style = {\n        top: -topOffset,\n        left: -leftOffset,\n        minWidth: width + width / 2\n      };\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: _objectSpread(_objectSpread({}, this.props.style), style),\n        className: \"rbc-overlay\",\n        ref: popperRef\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"rbc-overlay-header\"\n      }, localizer.format(slotStart, 'dayHeaderFormat')), events.map(function (event, idx) {\n        return /*#__PURE__*/React.createElement(EventCell, {\n          key: idx,\n          type: \"popup\",\n          localizer: localizer,\n          event: event,\n          getters: getters,\n          onSelect: onSelect,\n          accessors: accessors,\n          components: components,\n          onDoubleClick: onDoubleClick,\n          onKeyPress: onKeyPress,\n          continuesPrior: localizer.lt(accessors.end(event), slotStart, 'day'),\n          continuesAfter: localizer.gte(accessors.start(event), slotEnd, 'day'),\n          slotStart: slotStart,\n          slotEnd: slotEnd,\n          selected: isSelected(event, selected),\n          draggable: true,\n          onDragStart: function onDragStart() {\n            return _this.props.handleDragStart(event);\n          },\n          onDragEnd: function onDragEnd() {\n            return _this.props.show();\n          }\n        });\n      }));\n    }\n  }]);\n\n  return Popup;\n}(React.Component);\n/**\n * The Overlay component, of react-overlays, creates a ref that is passed to the Popup, and\n * requires proper ref forwarding to be used without error\n */\n\n\nvar Popup$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(Popup, Object.assign({\n    popperRef: ref\n  }, props));\n});\n\nfunction addEventListener(type, handler) {\n  var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;\n  return listen(target, type, handler, {\n    passive: false\n  });\n}\n\nfunction isOverContainer(container, x, y) {\n  return !container || contains(container, document.elementFromPoint(x, y));\n}\n\nfunction getEventNodeFromPoint(node, _ref) {\n  var clientX = _ref.clientX,\n      clientY = _ref.clientY;\n  var target = document.elementFromPoint(clientX, clientY);\n  return closest(target, '.rbc-event', node);\n}\n\nfunction isEvent(node, bounds) {\n  return !!getEventNodeFromPoint(node, bounds);\n}\n\nfunction getEventCoordinates(e) {\n  var target = e;\n\n  if (e.touches && e.touches.length) {\n    target = e.touches[0];\n  }\n\n  return {\n    clientX: target.clientX,\n    clientY: target.clientY,\n    pageX: target.pageX,\n    pageY: target.pageY\n  };\n}\n\nvar clickTolerance = 5;\nvar clickInterval = 250;\n\nvar Selection = /*#__PURE__*/function () {\n  function Selection(node) {\n    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref2$global = _ref2.global,\n        global = _ref2$global === void 0 ? false : _ref2$global,\n        _ref2$longPressThresh = _ref2.longPressThreshold,\n        longPressThreshold = _ref2$longPressThresh === void 0 ? 250 : _ref2$longPressThresh,\n        _ref2$validContainers = _ref2.validContainers,\n        validContainers = _ref2$validContainers === void 0 ? [] : _ref2$validContainers;\n\n    _classCallCheck(this, Selection);\n\n    this.isDetached = false;\n    this.container = node;\n    this.globalMouse = !node || global;\n    this.longPressThreshold = longPressThreshold;\n    this.validContainers = validContainers;\n    this._listeners = Object.create(null);\n    this._handleInitialEvent = this._handleInitialEvent.bind(this);\n    this._handleMoveEvent = this._handleMoveEvent.bind(this);\n    this._handleTerminatingEvent = this._handleTerminatingEvent.bind(this);\n    this._keyListener = this._keyListener.bind(this);\n    this._dropFromOutsideListener = this._dropFromOutsideListener.bind(this);\n    this._dragOverFromOutsideListener = this._dragOverFromOutsideListener.bind(this); // Fixes an iOS 10 bug where scrolling could not be prevented on the window.\n    // https://github.com/metafizzy/flickity/issues/457#issuecomment-254501356\n\n    this._removeTouchMoveWindowListener = addEventListener('touchmove', function () {}, window);\n    this._removeKeyDownListener = addEventListener('keydown', this._keyListener);\n    this._removeKeyUpListener = addEventListener('keyup', this._keyListener);\n    this._removeDropFromOutsideListener = addEventListener('drop', this._dropFromOutsideListener);\n    this._removeDragOverFromOutsideListener = addEventListener('dragover', this._dragOverFromOutsideListener);\n\n    this._addInitialEventListener();\n  }\n\n  _createClass(Selection, [{\n    key: \"on\",\n    value: function on(type, handler) {\n      var handlers = this._listeners[type] || (this._listeners[type] = []);\n      handlers.push(handler);\n      return {\n        remove: function remove() {\n          var idx = handlers.indexOf(handler);\n          if (idx !== -1) handlers.splice(idx, 1);\n        }\n      };\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(type) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      var result;\n      var handlers = this._listeners[type] || [];\n      handlers.forEach(function (fn) {\n        if (result === undefined) result = fn.apply(void 0, args);\n      });\n      return result;\n    }\n  }, {\n    key: \"teardown\",\n    value: function teardown() {\n      this.isDetached = true;\n      this._listeners = Object.create(null);\n      this._removeTouchMoveWindowListener && this._removeTouchMoveWindowListener();\n      this._removeInitialEventListener && this._removeInitialEventListener();\n      this._removeEndListener && this._removeEndListener();\n      this._onEscListener && this._onEscListener();\n      this._removeMoveListener && this._removeMoveListener();\n      this._removeKeyUpListener && this._removeKeyUpListener();\n      this._removeKeyDownListener && this._removeKeyDownListener();\n      this._removeDropFromOutsideListener && this._removeDropFromOutsideListener();\n      this._removeDragOverFromOutsideListener && this._removeDragOverFromOutsideListener();\n    }\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(node) {\n      var box = this._selectRect;\n      if (!box || !this.selecting) return false;\n      return objectsCollide(box, getBoundsForNode(node));\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(items) {\n      var box = this._selectRect; //not selecting\n\n      if (!box || !this.selecting) return [];\n      return items.filter(this.isSelected, this);\n    } // Adds a listener that will call the handler only after the user has pressed on the screen\n    // without moving their finger for 250ms.\n\n  }, {\n    key: \"_addLongPressListener\",\n    value: function _addLongPressListener(handler, initialEvent) {\n      var _this = this;\n\n      var timer = null;\n      var removeTouchMoveListener = null;\n      var removeTouchEndListener = null;\n\n      var handleTouchStart = function handleTouchStart(initialEvent) {\n        timer = setTimeout(function () {\n          cleanup();\n          handler(initialEvent);\n        }, _this.longPressThreshold);\n        removeTouchMoveListener = addEventListener('touchmove', function () {\n          return cleanup();\n        });\n        removeTouchEndListener = addEventListener('touchend', function () {\n          return cleanup();\n        });\n      };\n\n      var removeTouchStartListener = addEventListener('touchstart', handleTouchStart);\n\n      var cleanup = function cleanup() {\n        if (timer) {\n          clearTimeout(timer);\n        }\n\n        if (removeTouchMoveListener) {\n          removeTouchMoveListener();\n        }\n\n        if (removeTouchEndListener) {\n          removeTouchEndListener();\n        }\n\n        timer = null;\n        removeTouchMoveListener = null;\n        removeTouchEndListener = null;\n      };\n\n      if (initialEvent) {\n        handleTouchStart(initialEvent);\n      }\n\n      return function () {\n        cleanup();\n        removeTouchStartListener();\n      };\n    } // Listen for mousedown and touchstart events. When one is received, disable the other and setup\n    // future event handling based on the type of event.\n\n  }, {\n    key: \"_addInitialEventListener\",\n    value: function _addInitialEventListener() {\n      var _this2 = this;\n\n      var removeMouseDownListener = addEventListener('mousedown', function (e) {\n        _this2._removeInitialEventListener();\n\n        _this2._handleInitialEvent(e);\n\n        _this2._removeInitialEventListener = addEventListener('mousedown', _this2._handleInitialEvent);\n      });\n      var removeTouchStartListener = addEventListener('touchstart', function (e) {\n        _this2._removeInitialEventListener();\n\n        _this2._removeInitialEventListener = _this2._addLongPressListener(_this2._handleInitialEvent, e);\n      });\n\n      this._removeInitialEventListener = function () {\n        removeMouseDownListener();\n        removeTouchStartListener();\n      };\n    }\n  }, {\n    key: \"_dropFromOutsideListener\",\n    value: function _dropFromOutsideListener(e) {\n      var _getEventCoordinates = getEventCoordinates(e),\n          pageX = _getEventCoordinates.pageX,\n          pageY = _getEventCoordinates.pageY,\n          clientX = _getEventCoordinates.clientX,\n          clientY = _getEventCoordinates.clientY;\n\n      this.emit('dropFromOutside', {\n        x: pageX,\n        y: pageY,\n        clientX: clientX,\n        clientY: clientY\n      });\n      e.preventDefault();\n    }\n  }, {\n    key: \"_dragOverFromOutsideListener\",\n    value: function _dragOverFromOutsideListener(e) {\n      var _getEventCoordinates2 = getEventCoordinates(e),\n          pageX = _getEventCoordinates2.pageX,\n          pageY = _getEventCoordinates2.pageY,\n          clientX = _getEventCoordinates2.clientX,\n          clientY = _getEventCoordinates2.clientY;\n\n      this.emit('dragOverFromOutside', {\n        x: pageX,\n        y: pageY,\n        clientX: clientX,\n        clientY: clientY\n      });\n      e.preventDefault();\n    }\n  }, {\n    key: \"_handleInitialEvent\",\n    value: function _handleInitialEvent(e) {\n      if (this.isDetached) {\n        return;\n      }\n\n      var _getEventCoordinates3 = getEventCoordinates(e),\n          clientX = _getEventCoordinates3.clientX,\n          clientY = _getEventCoordinates3.clientY,\n          pageX = _getEventCoordinates3.pageX,\n          pageY = _getEventCoordinates3.pageY;\n\n      var node = this.container(),\n          collides,\n          offsetData; // Right clicks\n\n      if (e.which === 3 || e.button === 2 || !isOverContainer(node, clientX, clientY)) return;\n\n      if (!this.globalMouse && node && !contains(node, e.target)) {\n        var _normalizeDistance = normalizeDistance(0),\n            top = _normalizeDistance.top,\n            left = _normalizeDistance.left,\n            bottom = _normalizeDistance.bottom,\n            right = _normalizeDistance.right;\n\n        offsetData = getBoundsForNode(node);\n        collides = objectsCollide({\n          top: offsetData.top - top,\n          left: offsetData.left - left,\n          bottom: offsetData.bottom + bottom,\n          right: offsetData.right + right\n        }, {\n          top: pageY,\n          left: pageX\n        });\n        if (!collides) return;\n      }\n\n      var result = this.emit('beforeSelect', this._initialEventData = {\n        isTouch: /^touch/.test(e.type),\n        x: pageX,\n        y: pageY,\n        clientX: clientX,\n        clientY: clientY\n      });\n      if (result === false) return;\n\n      switch (e.type) {\n        case 'mousedown':\n          this._removeEndListener = addEventListener('mouseup', this._handleTerminatingEvent);\n          this._onEscListener = addEventListener('keydown', this._handleTerminatingEvent);\n          this._removeMoveListener = addEventListener('mousemove', this._handleMoveEvent);\n          break;\n\n        case 'touchstart':\n          this._handleMoveEvent(e);\n\n          this._removeEndListener = addEventListener('touchend', this._handleTerminatingEvent);\n          this._removeMoveListener = addEventListener('touchmove', this._handleMoveEvent);\n          break;\n      }\n    } // Check whether provided event target element\n    // - is contained within a valid container\n\n  }, {\n    key: \"_isWithinValidContainer\",\n    value: function _isWithinValidContainer(e) {\n      var eventTarget = e.target;\n      var containers = this.validContainers;\n\n      if (!containers || !containers.length || !eventTarget) {\n        return true;\n      }\n\n      return containers.some(function (target) {\n        return !!eventTarget.closest(target);\n      });\n    }\n  }, {\n    key: \"_handleTerminatingEvent\",\n    value: function _handleTerminatingEvent(e) {\n      var _getEventCoordinates4 = getEventCoordinates(e),\n          pageX = _getEventCoordinates4.pageX,\n          pageY = _getEventCoordinates4.pageY;\n\n      this.selecting = false;\n      this._removeEndListener && this._removeEndListener();\n      this._removeMoveListener && this._removeMoveListener();\n      if (!this._initialEventData) return;\n      var inRoot = !this.container || contains(this.container(), e.target);\n\n      var isWithinValidContainer = this._isWithinValidContainer(e);\n\n      var bounds = this._selectRect;\n      var click = this.isClick(pageX, pageY);\n      this._initialEventData = null;\n\n      if (e.key === 'Escape' || !isWithinValidContainer) {\n        return this.emit('reset');\n      }\n\n      if (click && inRoot) {\n        return this._handleClickEvent(e);\n      } // User drag-clicked in the Selectable area\n\n\n      if (!click) return this.emit('select', bounds);\n      return this.emit('reset');\n    }\n  }, {\n    key: \"_handleClickEvent\",\n    value: function _handleClickEvent(e) {\n      var _getEventCoordinates5 = getEventCoordinates(e),\n          pageX = _getEventCoordinates5.pageX,\n          pageY = _getEventCoordinates5.pageY,\n          clientX = _getEventCoordinates5.clientX,\n          clientY = _getEventCoordinates5.clientY;\n\n      var now = new Date().getTime();\n\n      if (this._lastClickData && now - this._lastClickData.timestamp < clickInterval) {\n        // Double click event\n        this._lastClickData = null;\n        return this.emit('doubleClick', {\n          x: pageX,\n          y: pageY,\n          clientX: clientX,\n          clientY: clientY\n        });\n      } // Click event\n\n\n      this._lastClickData = {\n        timestamp: now\n      };\n      return this.emit('click', {\n        x: pageX,\n        y: pageY,\n        clientX: clientX,\n        clientY: clientY\n      });\n    }\n  }, {\n    key: \"_handleMoveEvent\",\n    value: function _handleMoveEvent(e) {\n      if (this._initialEventData === null || this.isDetached) {\n        return;\n      }\n\n      var _this$_initialEventDa = this._initialEventData,\n          x = _this$_initialEventDa.x,\n          y = _this$_initialEventDa.y;\n\n      var _getEventCoordinates6 = getEventCoordinates(e),\n          pageX = _getEventCoordinates6.pageX,\n          pageY = _getEventCoordinates6.pageY;\n\n      var w = Math.abs(x - pageX);\n      var h = Math.abs(y - pageY);\n      var left = Math.min(pageX, x),\n          top = Math.min(pageY, y),\n          old = this.selecting; // Prevent emitting selectStart event until mouse is moved.\n      // in Chrome on Windows, mouseMove event may be fired just after mouseDown event.\n\n      if (this.isClick(pageX, pageY) && !old && !(w || h)) {\n        return;\n      }\n\n      this.selecting = true;\n      this._selectRect = {\n        top: top,\n        left: left,\n        x: pageX,\n        y: pageY,\n        right: left + w,\n        bottom: top + h\n      };\n\n      if (!old) {\n        this.emit('selectStart', this._initialEventData);\n      }\n\n      if (!this.isClick(pageX, pageY)) this.emit('selecting', this._selectRect);\n      e.preventDefault();\n    }\n  }, {\n    key: \"_keyListener\",\n    value: function _keyListener(e) {\n      this.ctrl = e.metaKey || e.ctrlKey;\n    }\n  }, {\n    key: \"isClick\",\n    value: function isClick(pageX, pageY) {\n      var _this$_initialEventDa2 = this._initialEventData,\n          x = _this$_initialEventDa2.x,\n          y = _this$_initialEventDa2.y,\n          isTouch = _this$_initialEventDa2.isTouch;\n      return !isTouch && Math.abs(pageX - x) <= clickTolerance && Math.abs(pageY - y) <= clickTolerance;\n    }\n  }]);\n\n  return Selection;\n}();\n/**\n * Resolve the disance prop from either an Int or an Object\n * @return {Object}\n */\n\n\nfunction normalizeDistance() {\n  var distance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  if (_typeof(distance) !== 'object') distance = {\n    top: distance,\n    left: distance,\n    right: distance,\n    bottom: distance\n  };\n  return distance;\n}\n/**\n * Given two objects containing \"top\", \"left\", \"offsetWidth\" and \"offsetHeight\"\n * properties, determine if they collide.\n * @param  {Object|HTMLElement} a\n * @param  {Object|HTMLElement} b\n * @return {bool}\n */\n\n\nfunction objectsCollide(nodeA, nodeB) {\n  var tolerance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  var _getBoundsForNode = getBoundsForNode(nodeA),\n      aTop = _getBoundsForNode.top,\n      aLeft = _getBoundsForNode.left,\n      _getBoundsForNode$rig = _getBoundsForNode.right,\n      aRight = _getBoundsForNode$rig === void 0 ? aLeft : _getBoundsForNode$rig,\n      _getBoundsForNode$bot = _getBoundsForNode.bottom,\n      aBottom = _getBoundsForNode$bot === void 0 ? aTop : _getBoundsForNode$bot;\n\n  var _getBoundsForNode2 = getBoundsForNode(nodeB),\n      bTop = _getBoundsForNode2.top,\n      bLeft = _getBoundsForNode2.left,\n      _getBoundsForNode2$ri = _getBoundsForNode2.right,\n      bRight = _getBoundsForNode2$ri === void 0 ? bLeft : _getBoundsForNode2$ri,\n      _getBoundsForNode2$bo = _getBoundsForNode2.bottom,\n      bBottom = _getBoundsForNode2$bo === void 0 ? bTop : _getBoundsForNode2$bo;\n\n  return !( // 'a' bottom doesn't touch 'b' top\n  aBottom - tolerance < bTop || // 'a' top doesn't touch 'b' bottom\n  aTop + tolerance > bBottom || // 'a' right doesn't touch 'b' left\n  aRight - tolerance < bLeft || // 'a' left doesn't touch 'b' right\n  aLeft + tolerance > bRight);\n}\n/**\n * Given a node, get everything needed to calculate its boundaries\n * @param  {HTMLElement} node\n * @return {Object}\n */\n\n\nfunction getBoundsForNode(node) {\n  if (!node.getBoundingClientRect) return node;\n  var rect = node.getBoundingClientRect(),\n      left = rect.left + pageOffset('left'),\n      top = rect.top + pageOffset('top');\n  return {\n    top: top,\n    left: left,\n    right: (node.offsetWidth || 0) + left,\n    bottom: (node.offsetHeight || 0) + top\n  };\n}\n\nfunction pageOffset(dir) {\n  if (dir === 'left') return window.pageXOffset || document.body.scrollLeft || 0;\n  if (dir === 'top') return window.pageYOffset || document.body.scrollTop || 0;\n}\n\nvar BackgroundCells = /*#__PURE__*/function (_React$Component) {\n  _inherits(BackgroundCells, _React$Component);\n\n  var _super = _createSuper(BackgroundCells);\n\n  function BackgroundCells(props, context) {\n    var _this;\n\n    _classCallCheck(this, BackgroundCells);\n\n    _this = _super.call(this, props, context);\n    _this.state = {\n      selecting: false\n    };\n    _this.containerRef = /*#__PURE__*/createRef();\n    return _this;\n  }\n\n  _createClass(BackgroundCells, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.selectable && this._selectable();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._teardownSelectable();\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (nextProps.selectable && !this.props.selectable) this._selectable();\n      if (!nextProps.selectable && this.props.selectable) this._teardownSelectable();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          range = _this$props.range,\n          getNow = _this$props.getNow,\n          getters = _this$props.getters,\n          currentDate = _this$props.date,\n          Wrapper = _this$props.components.dateCellWrapper,\n          localizer = _this$props.localizer;\n      var _this$state = this.state,\n          selecting = _this$state.selecting,\n          startIdx = _this$state.startIdx,\n          endIdx = _this$state.endIdx;\n      var current = getNow();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"rbc-row-bg\",\n        ref: this.containerRef\n      }, range.map(function (date, index) {\n        var selected = selecting && index >= startIdx && index <= endIdx;\n\n        var _getters$dayProp = getters.dayProp(date),\n            className = _getters$dayProp.className,\n            style = _getters$dayProp.style;\n\n        return /*#__PURE__*/React.createElement(Wrapper, {\n          key: index,\n          value: date,\n          range: range\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          style: style,\n          className: clsx('rbc-day-bg', className, selected && 'rbc-selected-cell', localizer.isSameDate(date, current) && 'rbc-today', currentDate && localizer.neq(currentDate, date, 'month') && 'rbc-off-range-bg')\n        }));\n      }));\n    }\n  }, {\n    key: \"_selectable\",\n    value: function _selectable() {\n      var _this2 = this;\n\n      var node = this.containerRef.current;\n      var selector = this._selector = new Selection(this.props.container, {\n        longPressThreshold: this.props.longPressThreshold\n      });\n\n      var selectorClicksHandler = function selectorClicksHandler(point, actionType) {\n        if (!isEvent(node, point)) {\n          var rowBox = getBoundsForNode(node);\n          var _this2$props = _this2.props,\n              range = _this2$props.range,\n              rtl = _this2$props.rtl;\n\n          if (pointInBox(rowBox, point)) {\n            var currentCell = getSlotAtX(rowBox, point.x, rtl, range.length);\n\n            _this2._selectSlot({\n              startIdx: currentCell,\n              endIdx: currentCell,\n              action: actionType,\n              box: point\n            });\n          }\n        }\n\n        _this2._initial = {};\n\n        _this2.setState({\n          selecting: false\n        });\n      };\n\n      selector.on('selecting', function (box) {\n        var _this2$props2 = _this2.props,\n            range = _this2$props2.range,\n            rtl = _this2$props2.rtl;\n        var startIdx = -1;\n        var endIdx = -1;\n\n        if (!_this2.state.selecting) {\n          notify(_this2.props.onSelectStart, [box]);\n          _this2._initial = {\n            x: box.x,\n            y: box.y\n          };\n        }\n\n        if (selector.isSelected(node)) {\n          var nodeBox = getBoundsForNode(node);\n\n          var _dateCellSelection = dateCellSelection(_this2._initial, nodeBox, box, range.length, rtl);\n\n          startIdx = _dateCellSelection.startIdx;\n          endIdx = _dateCellSelection.endIdx;\n        }\n\n        _this2.setState({\n          selecting: true,\n          startIdx: startIdx,\n          endIdx: endIdx\n        });\n      });\n      selector.on('beforeSelect', function (box) {\n        if (_this2.props.selectable !== 'ignoreEvents') return;\n        return !isEvent(_this2.containerRef.current, box);\n      });\n      selector.on('click', function (point) {\n        return selectorClicksHandler(point, 'click');\n      });\n      selector.on('doubleClick', function (point) {\n        return selectorClicksHandler(point, 'doubleClick');\n      });\n      selector.on('select', function (bounds) {\n        _this2._selectSlot(_objectSpread(_objectSpread({}, _this2.state), {}, {\n          action: 'select',\n          bounds: bounds\n        }));\n\n        _this2._initial = {};\n\n        _this2.setState({\n          selecting: false\n        });\n\n        notify(_this2.props.onSelectEnd, [_this2.state]);\n      });\n    }\n  }, {\n    key: \"_teardownSelectable\",\n    value: function _teardownSelectable() {\n      if (!this._selector) return;\n\n      this._selector.teardown();\n\n      this._selector = null;\n    }\n  }, {\n    key: \"_selectSlot\",\n    value: function _selectSlot(_ref) {\n      var endIdx = _ref.endIdx,\n          startIdx = _ref.startIdx,\n          action = _ref.action,\n          bounds = _ref.bounds,\n          box = _ref.box;\n      if (endIdx !== -1 && startIdx !== -1) this.props.onSelectSlot && this.props.onSelectSlot({\n        start: startIdx,\n        end: endIdx,\n        action: action,\n        bounds: bounds,\n        box: box,\n        resourceId: this.props.resourceId\n      });\n    }\n  }]);\n\n  return BackgroundCells;\n}(React.Component);\n/* eslint-disable react/prop-types */\n\n\nvar EventRowMixin = {\n  propTypes: {\n    slotMetrics: PropTypes.object.isRequired,\n    selected: PropTypes.object,\n    isAllDay: PropTypes.bool,\n    accessors: PropTypes.object.isRequired,\n    localizer: PropTypes.object.isRequired,\n    components: PropTypes.object.isRequired,\n    getters: PropTypes.object.isRequired,\n    onSelect: PropTypes.func,\n    onDoubleClick: PropTypes.func,\n    onKeyPress: PropTypes.func\n  },\n  defaultProps: {\n    segments: [],\n    selected: {}\n  },\n  renderEvent: function renderEvent(props, event) {\n    var selected = props.selected;\n    props.isAllDay;\n    var accessors = props.accessors,\n        getters = props.getters,\n        onSelect = props.onSelect,\n        onDoubleClick = props.onDoubleClick,\n        onKeyPress = props.onKeyPress,\n        localizer = props.localizer,\n        slotMetrics = props.slotMetrics,\n        components = props.components,\n        resizable = props.resizable;\n    var continuesPrior = slotMetrics.continuesPrior(event);\n    var continuesAfter = slotMetrics.continuesAfter(event);\n    return /*#__PURE__*/React.createElement(EventCell, {\n      event: event,\n      getters: getters,\n      localizer: localizer,\n      accessors: accessors,\n      components: components,\n      onSelect: onSelect,\n      onDoubleClick: onDoubleClick,\n      onKeyPress: onKeyPress,\n      continuesPrior: continuesPrior,\n      continuesAfter: continuesAfter,\n      slotStart: slotMetrics.first,\n      slotEnd: slotMetrics.last,\n      selected: isSelected(event, selected),\n      resizable: resizable\n    });\n  },\n  renderSpan: function renderSpan(slots, len, key) {\n    var content = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ' ';\n    var per = Math.abs(len) / slots * 100 + '%';\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: key,\n      className: \"rbc-row-segment\" // IE10/11 need max-width. flex-basis doesn't respect box-sizing\n      ,\n      style: {\n        WebkitFlexBasis: per,\n        flexBasis: per,\n        maxWidth: per\n      }\n    }, content);\n  }\n};\n\nvar EventRow = /*#__PURE__*/function (_React$Component) {\n  _inherits(EventRow, _React$Component);\n\n  var _super = _createSuper(EventRow);\n\n  function EventRow() {\n    _classCallCheck(this, EventRow);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(EventRow, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props = this.props,\n          segments = _this$props.segments,\n          slots = _this$props.slotMetrics.slots,\n          className = _this$props.className;\n      var lastEnd = 1;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: clsx(className, 'rbc-row')\n      }, segments.reduce(function (row, _ref, li) {\n        var event = _ref.event,\n            left = _ref.left,\n            right = _ref.right,\n            span = _ref.span;\n        var key = '_lvl_' + li;\n        var gap = left - lastEnd;\n        var content = EventRowMixin.renderEvent(_this.props, event);\n        if (gap) row.push(EventRowMixin.renderSpan(slots, gap, \"\".concat(key, \"_gap\")));\n        row.push(EventRowMixin.renderSpan(slots, span, key, content));\n        lastEnd = right + 1;\n        return row;\n      }, []));\n    }\n  }]);\n\n  return EventRow;\n}(React.Component);\n\nEventRow.defaultProps = _objectSpread({}, EventRowMixin.defaultProps);\n\nfunction endOfRange(_ref) {\n  var dateRange = _ref.dateRange,\n      _ref$unit = _ref.unit,\n      unit = _ref$unit === void 0 ? 'day' : _ref$unit,\n      localizer = _ref.localizer;\n  return {\n    first: dateRange[0],\n    last: localizer.add(dateRange[dateRange.length - 1], 1, unit)\n  };\n} // properly calculating segments requires working with dates in\n// the timezone we're working with, so we use the localizer\n\n\nfunction eventSegments(event, range, accessors, localizer) {\n  var _endOfRange = endOfRange({\n    dateRange: range,\n    localizer: localizer\n  }),\n      first = _endOfRange.first,\n      last = _endOfRange.last;\n\n  var slots = localizer.diff(first, last, 'day');\n  var start = localizer.max(localizer.startOf(accessors.start(event), 'day'), first);\n  var end = localizer.min(localizer.ceil(accessors.end(event), 'day'), last);\n  var padding = findIndex(range, function (x) {\n    return localizer.isSameDate(x, start);\n  });\n  var span = localizer.diff(start, end, 'day');\n  span = Math.min(span, slots); // The segmentOffset is necessary when adjusting for timezones\n  // ahead of the browser timezone\n\n  span = Math.max(span - localizer.segmentOffset, 1);\n  return {\n    event: event,\n    span: span,\n    left: padding + 1,\n    right: Math.max(padding + span, 1)\n  };\n}\n\nfunction eventLevels(rowSegments) {\n  var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n  var i,\n      j,\n      seg,\n      levels = [],\n      extra = [];\n\n  for (i = 0; i < rowSegments.length; i++) {\n    seg = rowSegments[i];\n\n    for (j = 0; j < levels.length; j++) {\n      if (!segsOverlap(seg, levels[j])) break;\n    }\n\n    if (j >= limit) {\n      extra.push(seg);\n    } else {\n      (levels[j] || (levels[j] = [])).push(seg);\n    }\n  }\n\n  for (i = 0; i < levels.length; i++) {\n    levels[i].sort(function (a, b) {\n      return a.left - b.left;\n    }); //eslint-disable-line\n  }\n\n  return {\n    levels: levels,\n    extra: extra\n  };\n}\n\nfunction inRange(e, start, end, accessors, localizer) {\n  var event = {\n    start: accessors.start(e),\n    end: accessors.end(e)\n  };\n  var range = {\n    start: start,\n    end: end\n  };\n  return localizer.inEventRange({\n    event: event,\n    range: range\n  });\n}\n\nfunction segsOverlap(seg, otherSegs) {\n  return otherSegs.some(function (otherSeg) {\n    return otherSeg.left <= seg.right && otherSeg.right >= seg.left;\n  });\n}\n\nfunction sortEvents(eventA, eventB, accessors, localizer) {\n  var evtA = {\n    start: accessors.start(eventA),\n    end: accessors.end(eventA),\n    allDay: accessors.allDay(eventA)\n  };\n  var evtB = {\n    start: accessors.start(eventB),\n    end: accessors.end(eventB),\n    allDay: accessors.allDay(eventB)\n  };\n  return localizer.sortEvents({\n    evtA: evtA,\n    evtB: evtB\n  });\n}\n\nvar isSegmentInSlot$1 = function isSegmentInSlot(seg, slot) {\n  return seg.left <= slot && seg.right >= slot;\n};\n\nvar eventsInSlot = function eventsInSlot(segments, slot) {\n  return segments.filter(function (seg) {\n    return isSegmentInSlot$1(seg, slot);\n  }).length;\n};\n\nvar EventEndingRow = /*#__PURE__*/function (_React$Component) {\n  _inherits(EventEndingRow, _React$Component);\n\n  var _super = _createSuper(EventEndingRow);\n\n  function EventEndingRow() {\n    _classCallCheck(this, EventEndingRow);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(EventEndingRow, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          segments = _this$props.segments,\n          slots = _this$props.slotMetrics.slots;\n      var rowSegments = eventLevels(segments).levels[0];\n      var current = 1,\n          lastEnd = 1,\n          row = [];\n\n      while (current <= slots) {\n        var key = '_lvl_' + current;\n\n        var _ref = rowSegments.filter(function (seg) {\n          return isSegmentInSlot$1(seg, current);\n        })[0] || {},\n            event = _ref.event,\n            left = _ref.left,\n            right = _ref.right,\n            span = _ref.span; //eslint-disable-line\n\n\n        if (!event) {\n          current++;\n          continue;\n        }\n\n        var gap = Math.max(0, left - lastEnd);\n\n        if (this.canRenderSlotEvent(left, span)) {\n          var content = EventRowMixin.renderEvent(this.props, event);\n\n          if (gap) {\n            row.push(EventRowMixin.renderSpan(slots, gap, key + '_gap'));\n          }\n\n          row.push(EventRowMixin.renderSpan(slots, span, key, content));\n          lastEnd = current = right + 1;\n        } else {\n          if (gap) {\n            row.push(EventRowMixin.renderSpan(slots, gap, key + '_gap'));\n          }\n\n          row.push(EventRowMixin.renderSpan(slots, 1, key, this.renderShowMore(segments, current)));\n          lastEnd = current = current + 1;\n        }\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"rbc-row\"\n      }, row);\n    }\n  }, {\n    key: \"canRenderSlotEvent\",\n    value: function canRenderSlotEvent(slot, span) {\n      var segments = this.props.segments;\n      return range$1(slot, slot + span).every(function (s) {\n        var count = eventsInSlot(segments, s);\n        return count === 1;\n      });\n    }\n  }, {\n    key: \"renderShowMore\",\n    value: function renderShowMore(segments, slot) {\n      var _this = this;\n\n      var localizer = this.props.localizer;\n      var count = eventsInSlot(segments, slot);\n      return count ? /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        key: 'sm_' + slot,\n        className: clsx('rbc-button-link', 'rbc-show-more'),\n        onClick: function onClick(e) {\n          return _this.showMore(slot, e);\n        }\n      }, localizer.messages.showMore(count)) : false;\n    }\n  }, {\n    key: \"showMore\",\n    value: function showMore(slot, e) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.props.onShowMore(slot, e.target);\n    }\n  }]);\n\n  return EventEndingRow;\n}(React.Component);\n\nEventEndingRow.defaultProps = _objectSpread({}, EventRowMixin.defaultProps);\n\nvar ScrollableWeekWrapper = function ScrollableWeekWrapper(_ref) {\n  var children = _ref.children;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"rbc-row-content-scroll-container\"\n  }, children);\n};\n\nvar isSegmentInSlot = function isSegmentInSlot(seg, slot) {\n  return seg.left <= slot && seg.right >= slot;\n};\n\nvar isEqual = function isEqual(a, b) {\n  return a[0].range === b[0].range && a[0].events === b[0].events;\n};\n\nfunction getSlotMetrics$1() {\n  return memoize(function (options) {\n    var range = options.range,\n        events = options.events,\n        maxRows = options.maxRows,\n        minRows = options.minRows,\n        accessors = options.accessors,\n        localizer = options.localizer;\n\n    var _endOfRange = endOfRange({\n      dateRange: range,\n      localizer: localizer\n    }),\n        first = _endOfRange.first,\n        last = _endOfRange.last;\n\n    var segments = events.map(function (evt) {\n      return eventSegments(evt, range, accessors, localizer);\n    });\n\n    var _eventLevels = eventLevels(segments, Math.max(maxRows - 1, 1)),\n        levels = _eventLevels.levels,\n        extra = _eventLevels.extra;\n\n    while (levels.length < minRows) {\n      levels.push([]);\n    }\n\n    return {\n      first: first,\n      last: last,\n      levels: levels,\n      extra: extra,\n      range: range,\n      slots: range.length,\n      clone: function clone(args) {\n        var metrics = getSlotMetrics$1();\n        return metrics(_objectSpread(_objectSpread({}, options), args));\n      },\n      getDateForSlot: function getDateForSlot(slotNumber) {\n        return range[slotNumber];\n      },\n      getSlotForDate: function getSlotForDate(date) {\n        return range.find(function (r) {\n          return localizer.isSameDate(r, date);\n        });\n      },\n      getEventsForSlot: function getEventsForSlot(slot) {\n        return segments.filter(function (seg) {\n          return isSegmentInSlot(seg, slot);\n        }).map(function (seg) {\n          return seg.event;\n        });\n      },\n      continuesPrior: function continuesPrior(event) {\n        return localizer.continuesPrior(accessors.start(event), first);\n      },\n      continuesAfter: function continuesAfter(event) {\n        var start = accessors.start(event);\n        var end = accessors.end(event);\n        return localizer.continuesAfter(start, end, last);\n      }\n    };\n  }, isEqual);\n}\n\nvar DateContentRow = /*#__PURE__*/function (_React$Component) {\n  _inherits(DateContentRow, _React$Component);\n\n  var _super = _createSuper(DateContentRow);\n\n  function DateContentRow() {\n    var _this;\n\n    _classCallCheck(this, DateContentRow);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.handleSelectSlot = function (slot) {\n      var _this$props = _this.props,\n          range = _this$props.range,\n          onSelectSlot = _this$props.onSelectSlot;\n      onSelectSlot(range.slice(slot.start, slot.end + 1), slot);\n    };\n\n    _this.handleShowMore = function (slot, target) {\n      var _this$props2 = _this.props,\n          range = _this$props2.range,\n          onShowMore = _this$props2.onShowMore;\n\n      var metrics = _this.slotMetrics(_this.props);\n\n      var row = qsa(_this.containerRef.current, '.rbc-row-bg')[0];\n      var cell;\n      if (row) cell = row.children[slot - 1];\n      var events = metrics.getEventsForSlot(slot);\n      onShowMore(events, range[slot - 1], cell, slot, target);\n    };\n\n    _this.getContainer = function () {\n      var container = _this.props.container;\n      return container ? container() : _this.containerRef.current;\n    };\n\n    _this.renderHeadingCell = function (date, index) {\n      var _this$props3 = _this.props,\n          renderHeader = _this$props3.renderHeader,\n          getNow = _this$props3.getNow,\n          localizer = _this$props3.localizer;\n      return renderHeader({\n        date: date,\n        key: \"header_\".concat(index),\n        className: clsx('rbc-date-cell', localizer.isSameDate(date, getNow()) && 'rbc-now')\n      });\n    };\n\n    _this.renderDummy = function () {\n      var _this$props4 = _this.props,\n          className = _this$props4.className,\n          range = _this$props4.range,\n          renderHeader = _this$props4.renderHeader,\n          showAllEvents = _this$props4.showAllEvents;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: className,\n        ref: _this.containerRef\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: clsx('rbc-row-content', showAllEvents && 'rbc-row-content-scrollable')\n      }, renderHeader && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"rbc-row\",\n        ref: _this.headingRowRef\n      }, range.map(_this.renderHeadingCell)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"rbc-row\",\n        ref: _this.eventRowRef\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"rbc-row-segment\"\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"rbc-event\"\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"rbc-event-content\"\n      }, \"\\xA0\"))))));\n    };\n\n    _this.containerRef = /*#__PURE__*/createRef();\n    _this.headingRowRef = /*#__PURE__*/createRef();\n    _this.eventRowRef = /*#__PURE__*/createRef();\n    _this.slotMetrics = getSlotMetrics$1();\n    return _this;\n  }\n\n  _createClass(DateContentRow, [{\n    key: \"getRowLimit\",\n    value: function getRowLimit() {\n      /* Guessing this only gets called on the dummyRow */\n      var eventHeight = getHeight(this.eventRowRef.current);\n      var headingHeight = this.headingRowRef && this.headingRowRef.current ? getHeight(this.headingRowRef.current) : 0;\n      var eventSpace = getHeight(this.containerRef.current) - headingHeight;\n      return Math.max(Math.floor(eventSpace / eventHeight), 1);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          date = _this$props5.date,\n          rtl = _this$props5.rtl,\n          range = _this$props5.range,\n          className = _this$props5.className,\n          selected = _this$props5.selected,\n          selectable = _this$props5.selectable,\n          renderForMeasure = _this$props5.renderForMeasure,\n          accessors = _this$props5.accessors,\n          getters = _this$props5.getters,\n          components = _this$props5.components,\n          getNow = _this$props5.getNow,\n          renderHeader = _this$props5.renderHeader,\n          onSelect = _this$props5.onSelect,\n          localizer = _this$props5.localizer,\n          onSelectStart = _this$props5.onSelectStart,\n          onSelectEnd = _this$props5.onSelectEnd,\n          onDoubleClick = _this$props5.onDoubleClick,\n          onKeyPress = _this$props5.onKeyPress,\n          resourceId = _this$props5.resourceId,\n          longPressThreshold = _this$props5.longPressThreshold,\n          isAllDay = _this$props5.isAllDay,\n          resizable = _this$props5.resizable,\n          showAllEvents = _this$props5.showAllEvents;\n      if (renderForMeasure) return this.renderDummy();\n      var metrics = this.slotMetrics(this.props);\n      var levels = metrics.levels,\n          extra = metrics.extra;\n      var ScrollableWeekComponent = showAllEvents ? ScrollableWeekWrapper : NoopWrapper;\n      var WeekWrapper = components.weekWrapper;\n      var eventRowProps = {\n        selected: selected,\n        accessors: accessors,\n        getters: getters,\n        localizer: localizer,\n        components: components,\n        onSelect: onSelect,\n        onDoubleClick: onDoubleClick,\n        onKeyPress: onKeyPress,\n        resourceId: resourceId,\n        slotMetrics: metrics,\n        resizable: resizable\n      };\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: className,\n        role: \"rowgroup\",\n        ref: this.containerRef\n      }, /*#__PURE__*/React.createElement(BackgroundCells, {\n        localizer: localizer,\n        date: date,\n        getNow: getNow,\n        rtl: rtl,\n        range: range,\n        selectable: selectable,\n        container: this.getContainer,\n        getters: getters,\n        onSelectStart: onSelectStart,\n        onSelectEnd: onSelectEnd,\n        onSelectSlot: this.handleSelectSlot,\n        components: components,\n        longPressThreshold: longPressThreshold,\n        resourceId: resourceId\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: clsx('rbc-row-content', showAllEvents && 'rbc-row-content-scrollable'),\n        role: \"row\"\n      }, renderHeader && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"rbc-row \",\n        ref: this.headingRowRef\n      }, range.map(this.renderHeadingCell)), /*#__PURE__*/React.createElement(ScrollableWeekComponent, null, /*#__PURE__*/React.createElement(WeekWrapper, Object.assign({\n        isAllDay: isAllDay\n      }, eventRowProps), levels.map(function (segs, idx) {\n        return /*#__PURE__*/React.createElement(EventRow, Object.assign({\n          key: idx,\n          segments: segs\n        }, eventRowProps));\n      }), !!extra.length && /*#__PURE__*/React.createElement(EventEndingRow, Object.assign({\n        segments: extra,\n        onShowMore: this.handleShowMore\n      }, eventRowProps))))));\n    }\n  }]);\n\n  return DateContentRow;\n}(React.Component);\n\nDateContentRow.defaultProps = {\n  minRows: 0,\n  maxRows: Infinity\n};\n\nvar Header = function Header(_ref) {\n  var label = _ref.label;\n  return /*#__PURE__*/React.createElement(\"span\", {\n    role: \"columnheader\",\n    \"aria-sort\": \"none\"\n  }, label);\n};\n\nvar DateHeader = function DateHeader(_ref) {\n  var label = _ref.label,\n      drilldownView = _ref.drilldownView,\n      onDrillDown = _ref.onDrillDown;\n\n  if (!drilldownView) {\n    return /*#__PURE__*/React.createElement(\"span\", null, label);\n  }\n\n  return /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"rbc-button-link\",\n    onClick: onDrillDown,\n    role: \"cell\"\n  }, label);\n};\n\nvar _excluded$6 = [\"date\", \"className\"];\n\nvar eventsForWeek = function eventsForWeek(evts, start, end, accessors, localizer) {\n  return evts.filter(function (e) {\n    return inRange(e, start, end, accessors, localizer);\n  });\n};\n\nvar MonthView = /*#__PURE__*/function (_React$Component) {\n  _inherits(MonthView, _React$Component);\n\n  var _super = _createSuper(MonthView);\n\n  function MonthView() {\n    var _this;\n\n    _classCallCheck(this, MonthView);\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(_args));\n\n    _this.getContainer = function () {\n      return _this.containerRef.current;\n    };\n\n    _this.renderWeek = function (week, weekIdx) {\n      var _this$props = _this.props,\n          events = _this$props.events,\n          components = _this$props.components,\n          selectable = _this$props.selectable,\n          getNow = _this$props.getNow,\n          selected = _this$props.selected,\n          date = _this$props.date,\n          localizer = _this$props.localizer,\n          longPressThreshold = _this$props.longPressThreshold,\n          accessors = _this$props.accessors,\n          getters = _this$props.getters,\n          showAllEvents = _this$props.showAllEvents;\n      var _this$state = _this.state,\n          needLimitMeasure = _this$state.needLimitMeasure,\n          rowLimit = _this$state.rowLimit; // let's not mutate props\n\n      var weeksEvents = eventsForWeek(_toConsumableArray(events), week[0], week[week.length - 1], accessors, localizer);\n      weeksEvents.sort(function (a, b) {\n        return sortEvents(a, b, accessors, localizer);\n      });\n      return /*#__PURE__*/React.createElement(DateContentRow, {\n        key: weekIdx,\n        ref: weekIdx === 0 ? _this.slotRowRef : undefined,\n        container: _this.getContainer,\n        className: \"rbc-month-row\",\n        getNow: getNow,\n        date: date,\n        range: week,\n        events: weeksEvents,\n        maxRows: showAllEvents ? Infinity : rowLimit,\n        selected: selected,\n        selectable: selectable,\n        components: components,\n        accessors: accessors,\n        getters: getters,\n        localizer: localizer,\n        renderHeader: _this.readerDateHeading,\n        renderForMeasure: needLimitMeasure,\n        onShowMore: _this.handleShowMore,\n        onSelect: _this.handleSelectEvent,\n        onDoubleClick: _this.handleDoubleClickEvent,\n        onKeyPress: _this.handleKeyPressEvent,\n        onSelectSlot: _this.handleSelectSlot,\n        longPressThreshold: longPressThreshold,\n        rtl: _this.props.rtl,\n        resizable: _this.props.resizable,\n        showAllEvents: showAllEvents\n      });\n    };\n\n    _this.readerDateHeading = function (_ref) {\n      var date = _ref.date,\n          className = _ref.className,\n          props = _objectWithoutProperties(_ref, _excluded$6);\n\n      var _this$props2 = _this.props,\n          currentDate = _this$props2.date,\n          getDrilldownView = _this$props2.getDrilldownView,\n          localizer = _this$props2.localizer;\n      var isOffRange = localizer.neq(date, currentDate, 'month');\n      var isCurrent = localizer.isSameDate(date, currentDate);\n      var drilldownView = getDrilldownView(date);\n      var label = localizer.format(date, 'dateFormat');\n      var DateHeaderComponent = _this.props.components.dateHeader || DateHeader;\n      return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, props, {\n        className: clsx(className, isOffRange && 'rbc-off-range', isCurrent && 'rbc-current'),\n        role: \"cell\"\n      }), /*#__PURE__*/React.createElement(DateHeaderComponent, {\n        label: label,\n        date: date,\n        drilldownView: drilldownView,\n        isOffRange: isOffRange,\n        onDrillDown: function onDrillDown(e) {\n          return _this.handleHeadingClick(date, drilldownView, e);\n        }\n      }));\n    };\n\n    _this.handleSelectSlot = function (range, slotInfo) {\n      _this._pendingSelection = _this._pendingSelection.concat(range);\n      clearTimeout(_this._selectTimer);\n      _this._selectTimer = setTimeout(function () {\n        return _this.selectDates(slotInfo);\n      });\n    };\n\n    _this.handleHeadingClick = function (date, view, e) {\n      e.preventDefault();\n\n      _this.clearSelection();\n\n      notify(_this.props.onDrillDown, [date, view]);\n    };\n\n    _this.handleSelectEvent = function () {\n      _this.clearSelection();\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      notify(_this.props.onSelectEvent, args);\n    };\n\n    _this.handleDoubleClickEvent = function () {\n      _this.clearSelection();\n\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      notify(_this.props.onDoubleClickEvent, args);\n    };\n\n    _this.handleKeyPressEvent = function () {\n      _this.clearSelection();\n\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      notify(_this.props.onKeyPressEvent, args);\n    };\n\n    _this.handleShowMore = function (events, date, cell, slot, target) {\n      var _this$props3 = _this.props,\n          popup = _this$props3.popup,\n          onDrillDown = _this$props3.onDrillDown,\n          onShowMore = _this$props3.onShowMore,\n          getDrilldownView = _this$props3.getDrilldownView,\n          doShowMoreDrillDown = _this$props3.doShowMoreDrillDown; //cancel any pending selections so only the event click goes through.\n\n      _this.clearSelection();\n\n      if (popup) {\n        var position = getPosition(cell, _this.containerRef.current);\n\n        _this.setState({\n          overlay: {\n            date: date,\n            events: events,\n            position: position,\n            target: target\n          }\n        });\n      } else if (doShowMoreDrillDown) {\n        notify(onDrillDown, [date, getDrilldownView(date) || views.DAY]);\n      }\n\n      notify(onShowMore, [events, date, slot]);\n    };\n\n    _this.overlayDisplay = function () {\n      _this.setState({\n        overlay: null\n      });\n    };\n\n    _this.state = {\n      rowLimit: 5,\n      needLimitMeasure: true\n    };\n    _this.containerRef = /*#__PURE__*/createRef();\n    _this.slotRowRef = /*#__PURE__*/createRef();\n    _this._bgRows = [];\n    _this._pendingSelection = [];\n    return _this;\n  }\n\n  _createClass(MonthView, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(_ref2) {\n      var date = _ref2.date;\n      var _this$props4 = this.props,\n          propsDate = _this$props4.date,\n          localizer = _this$props4.localizer;\n      this.setState({\n        needLimitMeasure: localizer.neq(date, propsDate, 'month')\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var running;\n      if (this.state.needLimitMeasure) this.measureRowLimit(this.props);\n      window.addEventListener('resize', this._resizeListener = function () {\n        if (!running) {\n          animationFrame.request(function () {\n            running = false;\n\n            _this2.setState({\n              needLimitMeasure: true\n            }); //eslint-disable-line\n\n          });\n        }\n      }, false);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.state.needLimitMeasure) this.measureRowLimit(this.props);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this._resizeListener, false);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          date = _this$props5.date,\n          localizer = _this$props5.localizer,\n          className = _this$props5.className,\n          month = localizer.visibleDays(date, localizer),\n          weeks = chunk(month, 7);\n      this._weekCount = weeks.length;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: clsx('rbc-month-view', className),\n        role: \"table\",\n        \"aria-label\": \"Month View\",\n        ref: this.containerRef\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"rbc-row rbc-month-header\",\n        role: \"row\"\n      }, this.renderHeaders(weeks[0])), weeks.map(this.renderWeek), this.props.popup && this.renderOverlay());\n    }\n  }, {\n    key: \"renderHeaders\",\n    value: function renderHeaders(row) {\n      var _this$props6 = this.props,\n          localizer = _this$props6.localizer,\n          components = _this$props6.components;\n      var first = row[0];\n      var last = row[row.length - 1];\n      var HeaderComponent = components.header || Header;\n      return localizer.range(first, last, 'day').map(function (day, idx) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: 'header_' + idx,\n          className: \"rbc-header\"\n        }, /*#__PURE__*/React.createElement(HeaderComponent, {\n          date: day,\n          localizer: localizer,\n          label: localizer.format(day, 'weekdayFormat')\n        }));\n      });\n    }\n  }, {\n    key: \"renderOverlay\",\n    value: function renderOverlay() {\n      var _this3 = this;\n\n      var overlay = this.state && this.state.overlay || {};\n      var _this$props7 = this.props,\n          accessors = _this$props7.accessors,\n          localizer = _this$props7.localizer,\n          components = _this$props7.components,\n          getters = _this$props7.getters,\n          selected = _this$props7.selected,\n          popupOffset = _this$props7.popupOffset;\n      return /*#__PURE__*/React.createElement(Overlay, {\n        rootClose: true,\n        placement: \"bottom\",\n        show: !!overlay.position,\n        onHide: function onHide() {\n          return _this3.setState({\n            overlay: null\n          });\n        },\n        target: function target() {\n          return overlay.target;\n        }\n      }, function (_ref3) {\n        var props = _ref3.props;\n        return /*#__PURE__*/React.createElement(Popup$1, Object.assign({}, props, {\n          popupOffset: popupOffset,\n          accessors: accessors,\n          getters: getters,\n          selected: selected,\n          components: components,\n          localizer: localizer,\n          position: overlay.position,\n          show: _this3.overlayDisplay,\n          events: overlay.events,\n          slotStart: overlay.date,\n          slotEnd: overlay.end,\n          onSelect: _this3.handleSelectEvent,\n          onDoubleClick: _this3.handleDoubleClickEvent,\n          onKeyPress: _this3.handleKeyPressEvent,\n          handleDragStart: _this3.props.handleDragStart\n        }));\n      });\n    }\n  }, {\n    key: \"measureRowLimit\",\n    value: function measureRowLimit() {\n      this.setState({\n        needLimitMeasure: false,\n        rowLimit: this.slotRowRef.current.getRowLimit()\n      });\n    }\n  }, {\n    key: \"selectDates\",\n    value: function selectDates(slotInfo) {\n      var slots = this._pendingSelection.slice();\n\n      this._pendingSelection = [];\n      slots.sort(function (a, b) {\n        return +a - +b;\n      });\n      var start = new Date(slots[0]);\n      var end = new Date(slots[slots.length - 1]);\n      end.setDate(slots[slots.length - 1].getDate() + 1);\n      notify(this.props.onSelectSlot, {\n        slots: slots,\n        start: start,\n        end: end,\n        action: slotInfo.action,\n        bounds: slotInfo.bounds,\n        box: slotInfo.box\n      });\n    }\n  }, {\n    key: \"clearSelection\",\n    value: function clearSelection() {\n      clearTimeout(this._selectTimer);\n      this._pendingSelection = [];\n    }\n  }]);\n\n  return MonthView;\n}(React.Component);\n\nMonthView.range = function (date, _ref4) {\n  var localizer = _ref4.localizer;\n  var start = localizer.firstVisibleDay(date, localizer);\n  var end = localizer.lastVisibleDay(date, localizer);\n  return {\n    start: start,\n    end: end\n  };\n};\n\nMonthView.navigate = function (date, action, _ref5) {\n  var localizer = _ref5.localizer;\n\n  switch (action) {\n    case navigate.PREVIOUS:\n      return localizer.add(date, -1, 'month');\n\n    case navigate.NEXT:\n      return localizer.add(date, 1, 'month');\n\n    default:\n      return date;\n  }\n};\n\nMonthView.title = function (date, _ref6) {\n  var localizer = _ref6.localizer;\n  return localizer.format(date, 'monthHeaderFormat');\n};\n\nvar getKey = function getKey(_ref) {\n  var min = _ref.min,\n      max = _ref.max,\n      step = _ref.step,\n      slots = _ref.slots,\n      localizer = _ref.localizer;\n  return \"\".concat(+localizer.startOf(min, 'minutes')) + \"\".concat(+localizer.startOf(max, 'minutes')) + \"\".concat(step, \"-\").concat(slots);\n};\n\nfunction getSlotMetrics(_ref2) {\n  var start = _ref2.min,\n      end = _ref2.max,\n      step = _ref2.step,\n      timeslots = _ref2.timeslots,\n      localizer = _ref2.localizer;\n  var key = getKey({\n    start: start,\n    end: end,\n    step: step,\n    timeslots: timeslots,\n    localizer: localizer\n  }); // DST differences are handled inside the localizer\n\n  var totalMin = 1 + localizer.getTotalMin(start, end);\n  var minutesFromMidnight = localizer.getMinutesFromMidnight(start);\n  var numGroups = Math.ceil((totalMin - 1) / (step * timeslots));\n  var numSlots = numGroups * timeslots;\n  var groups = new Array(numGroups);\n  var slots = new Array(numSlots); // Each slot date is created from \"zero\", instead of adding `step` to\n  // the previous one, in order to avoid DST oddities\n\n  for (var grp = 0; grp < numGroups; grp++) {\n    groups[grp] = new Array(timeslots);\n\n    for (var slot = 0; slot < timeslots; slot++) {\n      var slotIdx = grp * timeslots + slot;\n      var minFromStart = slotIdx * step; // A date with total minutes calculated from the start of the day\n\n      slots[slotIdx] = groups[grp][slot] = localizer.getSlotDate(start, minutesFromMidnight, minFromStart);\n    }\n  } // Necessary to be able to select up until the last timeslot in a day\n\n\n  var lastSlotMinFromStart = slots.length * step;\n  slots.push(localizer.getSlotDate(start, minutesFromMidnight, lastSlotMinFromStart));\n\n  function positionFromDate(date) {\n    var diff = localizer.diff(start, date, 'minutes') + localizer.getDstOffset(start, date);\n    return Math.min(diff, totalMin);\n  }\n\n  return {\n    groups: groups,\n    update: function update(args) {\n      if (getKey(args) !== key) return getSlotMetrics(args);\n      return this;\n    },\n    dateIsInGroup: function dateIsInGroup(date, groupIndex) {\n      var nextGroup = groups[groupIndex + 1];\n      return localizer.inRange(date, groups[groupIndex][0], nextGroup ? nextGroup[0] : end, 'minutes');\n    },\n    nextSlot: function nextSlot(slot) {\n      var next = slots[Math.min(slots.indexOf(slot) + 1, slots.length - 1)]; // in the case of the last slot we won't a long enough range so manually get it\n\n      if (next === slot) next = localizer.add(slot, step, 'minutes');\n      return next;\n    },\n    closestSlotToPosition: function closestSlotToPosition(percent) {\n      var slot = Math.min(slots.length - 1, Math.max(0, Math.floor(percent * numSlots)));\n      return slots[slot];\n    },\n    closestSlotFromPoint: function closestSlotFromPoint(point, boundaryRect) {\n      var range = Math.abs(boundaryRect.top - boundaryRect.bottom);\n      return this.closestSlotToPosition((point.y - boundaryRect.top) / range);\n    },\n    closestSlotFromDate: function closestSlotFromDate(date) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      if (localizer.lt(date, start, 'minutes')) return slots[0];\n      if (localizer.gt(date, end, 'minutes')) return slots[slots.length - 1];\n      var diffMins = localizer.diff(start, date, 'minutes');\n      return slots[(diffMins - diffMins % step) / step + offset];\n    },\n    startsBeforeDay: function startsBeforeDay(date) {\n      return localizer.lt(date, start, 'day');\n    },\n    startsAfterDay: function startsAfterDay(date) {\n      return localizer.gt(date, end, 'day');\n    },\n    startsBefore: function startsBefore(date) {\n      return localizer.lt(localizer.merge(start, date), start, 'minutes');\n    },\n    startsAfter: function startsAfter(date) {\n      return localizer.gt(localizer.merge(end, date), end, 'minutes');\n    },\n    getRange: function getRange(rangeStart, rangeEnd, ignoreMin, ignoreMax) {\n      if (!ignoreMin) rangeStart = localizer.min(end, localizer.max(start, rangeStart));\n      if (!ignoreMax) rangeEnd = localizer.min(end, localizer.max(start, rangeEnd));\n      var rangeStartMin = positionFromDate(rangeStart);\n      var rangeEndMin = positionFromDate(rangeEnd);\n      var top = rangeEndMin > step * numSlots && !localizer.eq(end, rangeEnd) ? (rangeStartMin - step) / (step * numSlots) * 100 : rangeStartMin / (step * numSlots) * 100;\n      return {\n        top: top,\n        height: rangeEndMin / (step * numSlots) * 100 - top,\n        start: positionFromDate(rangeStart),\n        startDate: rangeStart,\n        end: positionFromDate(rangeEnd),\n        endDate: rangeEnd\n      };\n    },\n    getCurrentTimePosition: function getCurrentTimePosition(rangeStart) {\n      var rangeStartMin = positionFromDate(rangeStart);\n      var top = rangeStartMin / (step * numSlots) * 100;\n      return top;\n    }\n  };\n}\n\nvar Event = /*#__PURE__*/function () {\n  function Event(data, _ref) {\n    var accessors = _ref.accessors,\n        slotMetrics = _ref.slotMetrics;\n\n    _classCallCheck(this, Event);\n\n    var _slotMetrics$getRange = slotMetrics.getRange(accessors.start(data), accessors.end(data)),\n        start = _slotMetrics$getRange.start,\n        startDate = _slotMetrics$getRange.startDate,\n        end = _slotMetrics$getRange.end,\n        endDate = _slotMetrics$getRange.endDate,\n        top = _slotMetrics$getRange.top,\n        height = _slotMetrics$getRange.height;\n\n    this.start = start;\n    this.end = end;\n    this.startMs = +startDate;\n    this.endMs = +endDate;\n    this.top = top;\n    this.height = height;\n    this.data = data;\n  }\n  /**\n   * The event's width without any overlap.\n   */\n\n\n  _createClass(Event, [{\n    key: \"_width\",\n    get: function get() {\n      // The container event's width is determined by the maximum number of\n      // events in any of its rows.\n      if (this.rows) {\n        var columns = this.rows.reduce(function (max, row) {\n          return Math.max(max, row.leaves.length + 1);\n        }, // add itself\n        0) + 1; // add the container\n\n        return 100 / columns;\n      }\n\n      var availableWidth = 100 - this.container._width; // The row event's width is the space left by the container, divided\n      // among itself and its leaves.\n\n      if (this.leaves) {\n        return availableWidth / (this.leaves.length + 1);\n      } // The leaf event's width is determined by its row's width\n\n\n      return this.row._width;\n    }\n    /**\n     * The event's calculated width, possibly with extra width added for\n     * overlapping effect.\n     */\n\n  }, {\n    key: \"width\",\n    get: function get() {\n      var noOverlap = this._width;\n      var overlap = Math.min(100, this._width * 1.7); // Containers can always grow.\n\n      if (this.rows) {\n        return overlap;\n      } // Rows can grow if they have leaves.\n\n\n      if (this.leaves) {\n        return this.leaves.length > 0 ? overlap : noOverlap;\n      } // Leaves can grow unless they're the last item in a row.\n\n\n      var leaves = this.row.leaves;\n      var index = leaves.indexOf(this);\n      return index === leaves.length - 1 ? noOverlap : overlap;\n    }\n  }, {\n    key: \"xOffset\",\n    get: function get() {\n      // Containers have no offset.\n      if (this.rows) return 0; // Rows always start where their container ends.\n\n      if (this.leaves) return this.container._width; // Leaves are spread out evenly on the space left by its row.\n\n      var _this$row = this.row,\n          leaves = _this$row.leaves,\n          xOffset = _this$row.xOffset,\n          _width = _this$row._width;\n      var index = leaves.indexOf(this) + 1;\n      return xOffset + index * _width;\n    }\n  }]);\n\n  return Event;\n}();\n/**\n * Return true if event a and b is considered to be on the same row.\n */\n\n\nfunction onSameRow(a, b, minimumStartDifference) {\n  return (// Occupies the same start slot.\n    Math.abs(b.start - a.start) < minimumStartDifference || // A's start slot overlaps with b's end slot.\n    b.start > a.start && b.start < a.end\n  );\n}\n\nfunction sortByRender(events) {\n  var sortedByTime = sortBy(events, ['startMs', function (e) {\n    return -e.endMs;\n  }]);\n  var sorted = [];\n\n  while (sortedByTime.length > 0) {\n    var event = sortedByTime.shift();\n    sorted.push(event);\n\n    for (var i = 0; i < sortedByTime.length; i++) {\n      var test = sortedByTime[i]; // Still inside this event, look for next.\n\n      if (event.endMs > test.startMs) continue; // We've found the first event of the next event group.\n      // If that event is not right next to our current event, we have to\n      // move it here.\n\n      if (i > 0) {\n        var _event = sortedByTime.splice(i, 1)[0];\n        sorted.push(_event);\n      } // We've already found the next event group, so stop looking.\n\n\n      break;\n    }\n  }\n\n  return sorted;\n}\n\nfunction getStyledEvents$1(_ref2) {\n  var events = _ref2.events,\n      minimumStartDifference = _ref2.minimumStartDifference,\n      slotMetrics = _ref2.slotMetrics,\n      accessors = _ref2.accessors; // Create proxy events and order them so that we don't have\n  // to fiddle with z-indexes.\n\n  var proxies = events.map(function (event) {\n    return new Event(event, {\n      slotMetrics: slotMetrics,\n      accessors: accessors\n    });\n  });\n  var eventsInRenderOrder = sortByRender(proxies); // Group overlapping events, while keeping order.\n  // Every event is always one of: container, row or leaf.\n  // Containers can contain rows, and rows can contain leaves.\n\n  var containerEvents = [];\n\n  var _loop = function _loop(i) {\n    var event = eventsInRenderOrder[i]; // Check if this event can go into a container event.\n\n    var container = containerEvents.find(function (c) {\n      return c.end > event.start || Math.abs(event.start - c.start) < minimumStartDifference;\n    }); // Couldn't find a container — that means this event is a container.\n\n    if (!container) {\n      event.rows = [];\n      containerEvents.push(event);\n      return \"continue\";\n    } // Found a container for the event.\n\n\n    event.container = container; // Check if the event can be placed in an existing row.\n    // Start looking from behind.\n\n    var row = null;\n\n    for (var j = container.rows.length - 1; !row && j >= 0; j--) {\n      if (onSameRow(container.rows[j], event, minimumStartDifference)) {\n        row = container.rows[j];\n      }\n    }\n\n    if (row) {\n      // Found a row, so add it.\n      row.leaves.push(event);\n      event.row = row;\n    } else {\n      // Couldn't find a row – that means this event is a row.\n      event.leaves = [];\n      container.rows.push(event);\n    }\n  };\n\n  for (var i = 0; i < eventsInRenderOrder.length; i++) {\n    var _ret = _loop(i);\n\n    if (_ret === \"continue\") continue;\n  } // Return the original events, along with their styles.\n\n\n  return eventsInRenderOrder.map(function (event) {\n    return {\n      event: event.data,\n      style: {\n        top: event.top,\n        height: event.height,\n        width: event.width,\n        xOffset: Math.max(0, event.xOffset)\n      }\n    };\n  });\n}\n\nfunction getMaxIdxDFS(node, maxIdx, visited) {\n  for (var i = 0; i < node.friends.length; ++i) {\n    if (visited.indexOf(node.friends[i]) > -1) continue;\n    maxIdx = maxIdx > node.friends[i].idx ? maxIdx : node.friends[i].idx; // TODO : trace it by not object but kinda index or something for performance\n\n    visited.push(node.friends[i]);\n    var newIdx = getMaxIdxDFS(node.friends[i], maxIdx, visited);\n    maxIdx = maxIdx > newIdx ? maxIdx : newIdx;\n  }\n\n  return maxIdx;\n}\n\nfunction noOverlap(_ref) {\n  var events = _ref.events,\n      minimumStartDifference = _ref.minimumStartDifference,\n      slotMetrics = _ref.slotMetrics,\n      accessors = _ref.accessors;\n  var styledEvents = getStyledEvents$1({\n    events: events,\n    minimumStartDifference: minimumStartDifference,\n    slotMetrics: slotMetrics,\n    accessors: accessors\n  });\n  styledEvents.sort(function (a, b) {\n    a = a.style;\n    b = b.style;\n    if (a.top !== b.top) return a.top > b.top ? 1 : -1;else return a.top + a.height < b.top + b.height ? 1 : -1;\n  });\n\n  for (var i = 0; i < styledEvents.length; ++i) {\n    styledEvents[i].friends = [];\n    delete styledEvents[i].style.left;\n    delete styledEvents[i].style.left;\n    delete styledEvents[i].idx;\n    delete styledEvents[i].size;\n  }\n\n  for (var _i = 0; _i < styledEvents.length - 1; ++_i) {\n    var se1 = styledEvents[_i];\n    var y1 = se1.style.top;\n    var y2 = se1.style.top + se1.style.height;\n\n    for (var j = _i + 1; j < styledEvents.length; ++j) {\n      var se2 = styledEvents[j];\n      var y3 = se2.style.top;\n      var y4 = se2.style.top + se2.style.height; // be friends when overlapped\n\n      if (y3 <= y1 && y1 < y4 || y1 <= y3 && y3 < y2) {\n        // TODO : hashmap would be effective for performance\n        se1.friends.push(se2);\n        se2.friends.push(se1);\n      }\n    }\n  }\n\n  for (var _i2 = 0; _i2 < styledEvents.length; ++_i2) {\n    var se = styledEvents[_i2];\n    var bitmap = [];\n\n    for (var _j = 0; _j < 100; ++_j) {\n      bitmap.push(1);\n    } // 1 means available\n\n\n    for (var _j2 = 0; _j2 < se.friends.length; ++_j2) {\n      if (se.friends[_j2].idx !== undefined) bitmap[se.friends[_j2].idx] = 0;\n    } // 0 means reserved\n\n\n    se.idx = bitmap.indexOf(1);\n  }\n\n  for (var _i3 = 0; _i3 < styledEvents.length; ++_i3) {\n    var size = 0;\n    if (styledEvents[_i3].size) continue;\n    var allFriends = [];\n    var maxIdx = getMaxIdxDFS(styledEvents[_i3], 0, allFriends);\n    size = 100 / (maxIdx + 1);\n    styledEvents[_i3].size = size;\n\n    for (var _j3 = 0; _j3 < allFriends.length; ++_j3) {\n      allFriends[_j3].size = size;\n    }\n  }\n\n  for (var _i4 = 0; _i4 < styledEvents.length; ++_i4) {\n    var e = styledEvents[_i4];\n    e.style.left = e.idx * e.size; // stretch to maximum\n\n    var _maxIdx = 0;\n\n    for (var _j4 = 0; _j4 < e.friends.length; ++_j4) {\n      var idx = e.friends[_j4].idx;\n      _maxIdx = _maxIdx > idx ? _maxIdx : idx;\n    }\n\n    if (_maxIdx <= e.idx) e.size = 100 - e.idx * e.size; // padding between events\n    // for this feature, `width` is not percentage based unit anymore\n    // it will be used with calc()\n\n    var padding = e.idx === 0 ? 0 : 3;\n    e.style.width = \"calc(\".concat(e.size, \"% - \").concat(padding, \"px)\");\n    e.style.height = \"calc(\".concat(e.style.height, \"% - 2px)\");\n    e.style.xOffset = \"calc(\".concat(e.style.left, \"% + \").concat(padding, \"px)\");\n  }\n\n  return styledEvents;\n}\n/*eslint no-unused-vars: \"off\"*/\n\n\nvar DefaultAlgorithms = {\n  overlap: getStyledEvents$1,\n  'no-overlap': noOverlap\n};\n\nfunction isFunction(a) {\n  return !!(a && a.constructor && a.call && a.apply);\n} //\n\n\nfunction getStyledEvents(_ref) {\n  _ref.events;\n  _ref.minimumStartDifference;\n  _ref.slotMetrics;\n  _ref.accessors;\n  var dayLayoutAlgorithm = _ref.dayLayoutAlgorithm;\n  var algorithm = dayLayoutAlgorithm;\n  if (dayLayoutAlgorithm in DefaultAlgorithms) algorithm = DefaultAlgorithms[dayLayoutAlgorithm];\n\n  if (!isFunction(algorithm)) {\n    // invalid algorithm\n    return [];\n  }\n\n  return algorithm.apply(this, arguments);\n}\n\nvar TimeSlotGroup = /*#__PURE__*/function (_Component) {\n  _inherits(TimeSlotGroup, _Component);\n\n  var _super = _createSuper(TimeSlotGroup);\n\n  function TimeSlotGroup() {\n    _classCallCheck(this, TimeSlotGroup);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TimeSlotGroup, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          renderSlot = _this$props.renderSlot,\n          resource = _this$props.resource,\n          group = _this$props.group,\n          getters = _this$props.getters,\n          _this$props$component = _this$props.components;\n      _this$props$component = _this$props$component === void 0 ? {} : _this$props$component;\n      var _this$props$component2 = _this$props$component.timeSlotWrapper,\n          Wrapper = _this$props$component2 === void 0 ? NoopWrapper : _this$props$component2;\n      var groupProps = getters ? getters.slotGroupProp() : {};\n      return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n        className: \"rbc-timeslot-group\"\n      }, groupProps), group.map(function (value, idx) {\n        var slotProps = getters ? getters.slotProp(value, resource) : {};\n        return /*#__PURE__*/React.createElement(Wrapper, {\n          key: idx,\n          value: value,\n          resource: resource\n        }, /*#__PURE__*/React.createElement(\"div\", Object.assign({}, slotProps, {\n          className: clsx('rbc-time-slot', slotProps.className)\n        }), renderSlot && renderSlot(value, idx)));\n      }));\n    }\n  }]);\n\n  return TimeSlotGroup;\n}(Component);\n\nfunction stringifyPercent(v) {\n  return typeof v === 'string' ? v : v + '%';\n}\n/* eslint-disable react/prop-types */\n\n\nfunction TimeGridEvent(props) {\n  var style = props.style,\n      className = props.className,\n      event = props.event,\n      accessors = props.accessors,\n      rtl = props.rtl,\n      selected = props.selected,\n      label = props.label,\n      continuesPrior = props.continuesPrior,\n      continuesAfter = props.continuesAfter,\n      getters = props.getters,\n      onClick = props.onClick,\n      onDoubleClick = props.onDoubleClick,\n      isBackgroundEvent = props.isBackgroundEvent,\n      onKeyPress = props.onKeyPress,\n      _props$components = props.components,\n      Event = _props$components.event,\n      EventWrapper = _props$components.eventWrapper;\n  var title = accessors.title(event);\n  var tooltip = accessors.tooltip(event);\n  var end = accessors.end(event);\n  var start = accessors.start(event);\n  var userProps = getters.eventProp(event, start, end, selected);\n  var height = style.height,\n      top = style.top,\n      width = style.width,\n      xOffset = style.xOffset;\n  var inner = [/*#__PURE__*/React.createElement(\"div\", {\n    key: \"1\",\n    className: \"rbc-event-label\"\n  }, label), /*#__PURE__*/React.createElement(\"div\", {\n    key: \"2\",\n    className: \"rbc-event-content\"\n  }, Event ? /*#__PURE__*/React.createElement(Event, {\n    event: event,\n    title: title\n  }) : title)];\n  var eventStyle = isBackgroundEvent ? _objectSpread(_objectSpread({}, userProps.style), {}, _defineProperty({\n    top: stringifyPercent(top),\n    height: stringifyPercent(height),\n    // Adding 10px to take events container right margin into account\n    width: \"calc(\".concat(width, \" + 10px)\")\n  }, rtl ? 'right' : 'left', stringifyPercent(Math.max(0, xOffset)))) : _objectSpread(_objectSpread({}, userProps.style), {}, _defineProperty({\n    top: stringifyPercent(top),\n    width: stringifyPercent(width),\n    height: stringifyPercent(height)\n  }, rtl ? 'right' : 'left', stringifyPercent(xOffset)));\n  return /*#__PURE__*/React.createElement(EventWrapper, Object.assign({\n    type: \"time\"\n  }, props), /*#__PURE__*/React.createElement(\"div\", {\n    onClick: onClick,\n    onDoubleClick: onDoubleClick,\n    style: eventStyle,\n    onKeyPress: onKeyPress,\n    title: tooltip ? (typeof label === 'string' ? label + ': ' : '') + tooltip : undefined,\n    className: clsx(isBackgroundEvent ? 'rbc-background-event' : 'rbc-event', className, userProps.className, {\n      'rbc-selected': selected,\n      'rbc-event-continues-earlier': continuesPrior,\n      'rbc-event-continues-later': continuesAfter\n    })\n  }, inner));\n}\n\nvar DayColumnWrapper = function DayColumnWrapper(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      style = _ref.style,\n      innerRef = _ref.innerRef;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: className,\n    style: style,\n    ref: innerRef\n  }, children);\n};\n\nvar DayColumnWrapper$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(DayColumnWrapper, Object.assign({}, props, {\n    innerRef: ref\n  }));\n});\nvar _excluded$5 = [\"dayProp\"],\n    _excluded2$1 = [\"eventContainerWrapper\"];\n\nvar DayColumn = /*#__PURE__*/function (_React$Component) {\n  _inherits(DayColumn, _React$Component);\n\n  var _super = _createSuper(DayColumn);\n\n  function DayColumn() {\n    var _this;\n\n    _classCallCheck(this, DayColumn);\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(_args));\n    _this.state = {\n      selecting: false,\n      timeIndicatorPosition: null\n    };\n    _this.intervalTriggered = false;\n\n    _this.renderEvents = function (_ref) {\n      var events = _ref.events,\n          isBackgroundEvent = _ref.isBackgroundEvent;\n      var _this$props = _this.props,\n          rtl = _this$props.rtl,\n          selected = _this$props.selected,\n          accessors = _this$props.accessors,\n          localizer = _this$props.localizer,\n          getters = _this$props.getters,\n          components = _this$props.components,\n          step = _this$props.step,\n          timeslots = _this$props.timeslots,\n          dayLayoutAlgorithm = _this$props.dayLayoutAlgorithm,\n          resizable = _this$props.resizable;\n\n      var _assertThisInitialize = _assertThisInitialized(_this),\n          slotMetrics = _assertThisInitialize.slotMetrics;\n\n      var messages = localizer.messages;\n      var styledEvents = getStyledEvents({\n        events: events,\n        accessors: accessors,\n        slotMetrics: slotMetrics,\n        minimumStartDifference: Math.ceil(step * timeslots / 2),\n        dayLayoutAlgorithm: dayLayoutAlgorithm\n      });\n      return styledEvents.map(function (_ref2, idx) {\n        var event = _ref2.event,\n            style = _ref2.style;\n        var end = accessors.end(event);\n        var start = accessors.start(event);\n        var format = 'eventTimeRangeFormat';\n        var label;\n        var startsBeforeDay = slotMetrics.startsBeforeDay(start);\n        var startsAfterDay = slotMetrics.startsAfterDay(end);\n        if (startsBeforeDay) format = 'eventTimeRangeEndFormat';else if (startsAfterDay) format = 'eventTimeRangeStartFormat';\n        if (startsBeforeDay && startsAfterDay) label = messages.allDay;else label = localizer.format({\n          start: start,\n          end: end\n        }, format);\n        var continuesPrior = startsBeforeDay || slotMetrics.startsBefore(start);\n        var continuesAfter = startsAfterDay || slotMetrics.startsAfter(end);\n        return /*#__PURE__*/React.createElement(TimeGridEvent, {\n          style: style,\n          event: event,\n          label: label,\n          key: 'evt_' + idx,\n          getters: getters,\n          rtl: rtl,\n          components: components,\n          continuesPrior: continuesPrior,\n          continuesAfter: continuesAfter,\n          accessors: accessors,\n          selected: isSelected(event, selected),\n          onClick: function onClick(e) {\n            return _this._select(event, e);\n          },\n          onDoubleClick: function onDoubleClick(e) {\n            return _this._doubleClick(event, e);\n          },\n          isBackgroundEvent: isBackgroundEvent,\n          onKeyPress: function onKeyPress(e) {\n            return _this._keyPress(event, e);\n          },\n          resizable: resizable\n        });\n      });\n    };\n\n    _this._selectable = function () {\n      var node = _this.containerRef.current;\n      var _this$props2 = _this.props,\n          longPressThreshold = _this$props2.longPressThreshold,\n          localizer = _this$props2.localizer;\n      var selector = _this._selector = new Selection(function () {\n        return node;\n      }, {\n        longPressThreshold: longPressThreshold\n      });\n\n      var maybeSelect = function maybeSelect(box) {\n        var onSelecting = _this.props.onSelecting;\n        var current = _this.state || {};\n        var state = selectionState(box);\n        var start = state.startDate,\n            end = state.endDate;\n\n        if (onSelecting) {\n          if (localizer.eq(current.startDate, start, 'minutes') && localizer.eq(current.endDate, end, 'minutes') || onSelecting({\n            start: start,\n            end: end,\n            resourceId: _this.props.resource\n          }) === false) return;\n        }\n\n        if (_this.state.start !== state.start || _this.state.end !== state.end || _this.state.selecting !== state.selecting) {\n          _this.setState(state);\n        }\n      };\n\n      var selectionState = function selectionState(point) {\n        var currentSlot = _this.slotMetrics.closestSlotFromPoint(point, getBoundsForNode(node));\n\n        if (!_this.state.selecting) {\n          _this._initialSlot = currentSlot;\n        }\n\n        var initialSlot = _this._initialSlot;\n\n        if (localizer.lte(initialSlot, currentSlot)) {\n          currentSlot = _this.slotMetrics.nextSlot(currentSlot);\n        } else if (localizer.gt(initialSlot, currentSlot)) {\n          initialSlot = _this.slotMetrics.nextSlot(initialSlot);\n        }\n\n        var selectRange = _this.slotMetrics.getRange(localizer.min(initialSlot, currentSlot), localizer.max(initialSlot, currentSlot));\n\n        return _objectSpread(_objectSpread({}, selectRange), {}, {\n          selecting: true,\n          top: \"\".concat(selectRange.top, \"%\"),\n          height: \"\".concat(selectRange.height, \"%\")\n        });\n      };\n\n      var selectorClicksHandler = function selectorClicksHandler(box, actionType) {\n        if (!isEvent(_this.containerRef.current, box)) {\n          var _selectionState = selectionState(box),\n              startDate = _selectionState.startDate,\n              endDate = _selectionState.endDate;\n\n          _this._selectSlot({\n            startDate: startDate,\n            endDate: endDate,\n            action: actionType,\n            box: box\n          });\n        }\n\n        _this.setState({\n          selecting: false\n        });\n      };\n\n      selector.on('selecting', maybeSelect);\n      selector.on('selectStart', maybeSelect);\n      selector.on('beforeSelect', function (box) {\n        if (_this.props.selectable !== 'ignoreEvents') return;\n        return !isEvent(_this.containerRef.current, box);\n      });\n      selector.on('click', function (box) {\n        return selectorClicksHandler(box, 'click');\n      });\n      selector.on('doubleClick', function (box) {\n        return selectorClicksHandler(box, 'doubleClick');\n      });\n      selector.on('select', function (bounds) {\n        if (_this.state.selecting) {\n          _this._selectSlot(_objectSpread(_objectSpread({}, _this.state), {}, {\n            action: 'select',\n            bounds: bounds\n          }));\n\n          _this.setState({\n            selecting: false\n          });\n        }\n      });\n      selector.on('reset', function () {\n        if (_this.state.selecting) {\n          _this.setState({\n            selecting: false\n          });\n        }\n      });\n    };\n\n    _this._teardownSelectable = function () {\n      if (!_this._selector) return;\n\n      _this._selector.teardown();\n\n      _this._selector = null;\n    };\n\n    _this._selectSlot = function (_ref3) {\n      var startDate = _ref3.startDate,\n          endDate = _ref3.endDate,\n          action = _ref3.action,\n          bounds = _ref3.bounds,\n          box = _ref3.box;\n      var current = startDate,\n          slots = [];\n\n      while (_this.props.localizer.lte(current, endDate)) {\n        slots.push(current);\n        current = new Date(+current + _this.props.step * 60 * 1000); // using Date ensures not to create an endless loop the day DST begins\n      }\n\n      notify(_this.props.onSelectSlot, {\n        slots: slots,\n        start: startDate,\n        end: endDate,\n        resourceId: _this.props.resource,\n        action: action,\n        bounds: bounds,\n        box: box\n      });\n    };\n\n    _this._select = function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      notify(_this.props.onSelectEvent, args);\n    };\n\n    _this._doubleClick = function () {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      notify(_this.props.onDoubleClickEvent, args);\n    };\n\n    _this._keyPress = function () {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      notify(_this.props.onKeyPressEvent, args);\n    };\n\n    _this.slotMetrics = getSlotMetrics(_this.props);\n    _this.containerRef = /*#__PURE__*/createRef();\n    return _this;\n  }\n\n  _createClass(DayColumn, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.selectable && this._selectable();\n\n      if (this.props.isNow) {\n        this.setTimeIndicatorPositionUpdateInterval();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._teardownSelectable();\n\n      this.clearTimeIndicatorInterval();\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (nextProps.selectable && !this.props.selectable) this._selectable();\n      if (!nextProps.selectable && this.props.selectable) this._teardownSelectable();\n      this.slotMetrics = this.slotMetrics.update(nextProps);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this$props3 = this.props,\n          getNow = _this$props3.getNow,\n          isNow = _this$props3.isNow,\n          localizer = _this$props3.localizer,\n          date = _this$props3.date,\n          min = _this$props3.min,\n          max = _this$props3.max;\n      var getNowChanged = localizer.neq(prevProps.getNow(), getNow(), 'minutes');\n\n      if (prevProps.isNow !== isNow || getNowChanged) {\n        this.clearTimeIndicatorInterval();\n\n        if (isNow) {\n          var tail = !getNowChanged && localizer.eq(prevProps.date, date, 'minutes') && prevState.timeIndicatorPosition === this.state.timeIndicatorPosition;\n          this.setTimeIndicatorPositionUpdateInterval(tail);\n        }\n      } else if (isNow && (localizer.neq(prevProps.min, min, 'minutes') || localizer.neq(prevProps.max, max, 'minutes'))) {\n        this.positionTimeIndicator();\n      }\n    }\n    /**\n     * @param tail {Boolean} - whether `positionTimeIndicator` call should be\n     *   deferred or called upon setting interval (`true` - if deferred);\n     */\n\n  }, {\n    key: \"setTimeIndicatorPositionUpdateInterval\",\n    value: function setTimeIndicatorPositionUpdateInterval() {\n      var _this2 = this;\n\n      var tail = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (!this.intervalTriggered && !tail) {\n        this.positionTimeIndicator();\n      }\n\n      this._timeIndicatorTimeout = window.setTimeout(function () {\n        _this2.intervalTriggered = true;\n\n        _this2.positionTimeIndicator();\n\n        _this2.setTimeIndicatorPositionUpdateInterval();\n      }, 60000);\n    }\n  }, {\n    key: \"clearTimeIndicatorInterval\",\n    value: function clearTimeIndicatorInterval() {\n      this.intervalTriggered = false;\n      window.clearTimeout(this._timeIndicatorTimeout);\n    }\n  }, {\n    key: \"positionTimeIndicator\",\n    value: function positionTimeIndicator() {\n      var _this$props4 = this.props,\n          min = _this$props4.min,\n          max = _this$props4.max,\n          getNow = _this$props4.getNow;\n      var current = getNow();\n\n      if (current >= min && current <= max) {\n        var top = this.slotMetrics.getCurrentTimePosition(current);\n        this.intervalTriggered = true;\n        this.setState({\n          timeIndicatorPosition: top\n        });\n      } else {\n        this.clearTimeIndicatorInterval();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          date = _this$props5.date,\n          max = _this$props5.max,\n          rtl = _this$props5.rtl,\n          isNow = _this$props5.isNow,\n          resource = _this$props5.resource,\n          accessors = _this$props5.accessors,\n          localizer = _this$props5.localizer,\n          _this$props5$getters = _this$props5.getters,\n          dayProp = _this$props5$getters.dayProp,\n          getters = _objectWithoutProperties(_this$props5$getters, _excluded$5),\n          _this$props5$componen = _this$props5.components,\n          EventContainer = _this$props5$componen.eventContainerWrapper,\n          components = _objectWithoutProperties(_this$props5$componen, _excluded2$1);\n\n      var slotMetrics = this.slotMetrics;\n      var _this$state = this.state,\n          selecting = _this$state.selecting,\n          top = _this$state.top,\n          height = _this$state.height,\n          startDate = _this$state.startDate,\n          endDate = _this$state.endDate;\n      var selectDates = {\n        start: startDate,\n        end: endDate\n      };\n\n      var _dayProp = dayProp(max),\n          className = _dayProp.className,\n          style = _dayProp.style;\n\n      var DayColumnWrapperComponent = components.dayColumnWrapper || DayColumnWrapper$1;\n      return /*#__PURE__*/React.createElement(DayColumnWrapperComponent, {\n        ref: this.containerRef,\n        date: date,\n        style: style,\n        className: clsx(className, 'rbc-day-slot', 'rbc-time-column', isNow && 'rbc-now', isNow && 'rbc-today', // WHY\n        selecting && 'rbc-slot-selecting'),\n        slotMetrics: slotMetrics\n      }, slotMetrics.groups.map(function (grp, idx) {\n        return /*#__PURE__*/React.createElement(TimeSlotGroup, {\n          key: idx,\n          group: grp,\n          resource: resource,\n          getters: getters,\n          components: components\n        });\n      }), /*#__PURE__*/React.createElement(EventContainer, {\n        localizer: localizer,\n        resource: resource,\n        accessors: accessors,\n        getters: getters,\n        components: components,\n        slotMetrics: slotMetrics\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: clsx('rbc-events-container', rtl && 'rtl')\n      }, this.renderEvents({\n        events: this.props.backgroundEvents,\n        isBackgroundEvent: true\n      }), this.renderEvents({\n        events: this.props.events\n      }))), selecting && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"rbc-slot-selection\",\n        style: {\n          top: top,\n          height: height\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", null, localizer.format(selectDates, 'selectRangeFormat'))), isNow && this.intervalTriggered && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"rbc-current-time-indicator\",\n        style: {\n          top: \"\".concat(this.state.timeIndicatorPosition, \"%\")\n        }\n      }));\n    }\n  }]);\n\n  return DayColumn;\n}(React.Component);\n\nDayColumn.defaultProps = {\n  dragThroughEvents: true,\n  timeslots: 2\n};\n/**\n * Since the TimeGutter only displays the 'times' of slots in a day, and is separate\n * from the Day Columns themselves, we check to see if the range contains an offset difference\n * and, if so, change the beginning and end 'date' by a day to properly display the slots times\n * used.\n */\n\nfunction adjustForDST(_ref) {\n  var min = _ref.min,\n      max = _ref.max,\n      localizer = _ref.localizer;\n\n  if (localizer.getTimezoneOffset(min) !== localizer.getTimezoneOffset(max)) {\n    return {\n      start: localizer.add(min, -1, 'day'),\n      end: localizer.add(max, -1, 'day')\n    };\n  }\n\n  return {\n    start: min,\n    end: max\n  };\n}\n\nvar TimeGutter = function TimeGutter(_ref2) {\n  var min = _ref2.min,\n      max = _ref2.max,\n      timeslots = _ref2.timeslots,\n      step = _ref2.step,\n      localizer = _ref2.localizer,\n      getNow = _ref2.getNow,\n      resource = _ref2.resource,\n      components = _ref2.components,\n      getters = _ref2.getters,\n      gutterRef = _ref2.gutterRef;\n\n  var _useMemo = useMemo(function () {\n    return adjustForDST({\n      min: min,\n      max: max,\n      localizer: localizer\n    });\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [min === null || min === void 0 ? void 0 : min.toISOString(), max === null || max === void 0 ? void 0 : max.toISOString(), localizer]),\n      start = _useMemo.start,\n      end = _useMemo.end;\n\n  var _useState = useState(getSlotMetrics({\n    min: start,\n    max: end,\n    timeslots: timeslots,\n    step: step,\n    localizer: localizer\n  })),\n      _useState2 = _slicedToArray(_useState, 2),\n      slotMetrics = _useState2[0],\n      setSlotMetrics = _useState2[1];\n\n  useEffect(function () {\n    if (slotMetrics) {\n      setSlotMetrics(slotMetrics.update({\n        min: start,\n        max: end,\n        timeslots: timeslots,\n        step: step,\n        localizer: localizer\n      }));\n    }\n    /**\n     * We don't want this to fire when slotMetrics is updated as it would recursively bomb\n     */\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [start === null || start === void 0 ? void 0 : start.toISOString(), end === null || end === void 0 ? void 0 : end.toISOString(), timeslots, step]);\n  var renderSlot = useCallback(function (value, idx) {\n    if (idx) return null; // don't return the first (0) idx\n\n    var isNow = slotMetrics.dateIsInGroup(getNow(), idx);\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: clsx('rbc-label', isNow && 'rbc-now')\n    }, localizer.format(value, 'timeGutterFormat'));\n  }, [slotMetrics, localizer, getNow]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"rbc-time-gutter rbc-time-column\",\n    ref: gutterRef\n  }, slotMetrics.groups.map(function (grp, idx) {\n    return /*#__PURE__*/React.createElement(TimeSlotGroup, {\n      key: idx,\n      group: grp,\n      resource: resource,\n      components: components,\n      renderSlot: renderSlot,\n      getters: getters\n    });\n  }));\n};\n\nvar TimeGutter$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(TimeGutter, Object.assign({\n    gutterRef: ref\n  }, props));\n});\n\nvar ResourceHeader = function ResourceHeader(_ref) {\n  var label = _ref.label;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, label);\n};\n\nvar TimeGridHeader = /*#__PURE__*/function (_React$Component) {\n  _inherits(TimeGridHeader, _React$Component);\n\n  var _super = _createSuper(TimeGridHeader);\n\n  function TimeGridHeader() {\n    var _this;\n\n    _classCallCheck(this, TimeGridHeader);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.handleHeaderClick = function (date, view, e) {\n      e.preventDefault();\n      notify(_this.props.onDrillDown, [date, view]);\n    };\n\n    _this.renderRow = function (resource) {\n      var _this$props = _this.props,\n          events = _this$props.events,\n          rtl = _this$props.rtl,\n          selectable = _this$props.selectable,\n          getNow = _this$props.getNow,\n          range = _this$props.range,\n          getters = _this$props.getters,\n          localizer = _this$props.localizer,\n          accessors = _this$props.accessors,\n          components = _this$props.components,\n          resizable = _this$props.resizable;\n      var resourceId = accessors.resourceId(resource);\n      var eventsToDisplay = resource ? events.filter(function (event) {\n        return accessors.resource(event) === resourceId;\n      }) : events;\n      return /*#__PURE__*/React.createElement(DateContentRow, {\n        isAllDay: true,\n        rtl: rtl,\n        getNow: getNow,\n        minRows: 2,\n        range: range,\n        events: eventsToDisplay,\n        resourceId: resourceId,\n        className: \"rbc-allday-cell\",\n        selectable: selectable,\n        selected: _this.props.selected,\n        components: components,\n        accessors: accessors,\n        getters: getters,\n        localizer: localizer,\n        onSelect: _this.props.onSelectEvent,\n        onDoubleClick: _this.props.onDoubleClickEvent,\n        onKeyPress: _this.props.onKeyPressEvent,\n        onSelectSlot: _this.props.onSelectSlot,\n        longPressThreshold: _this.props.longPressThreshold,\n        resizable: resizable\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(TimeGridHeader, [{\n    key: \"renderHeaderCells\",\n    value: function renderHeaderCells(range) {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          localizer = _this$props2.localizer,\n          getDrilldownView = _this$props2.getDrilldownView,\n          getNow = _this$props2.getNow,\n          dayProp = _this$props2.getters.dayProp,\n          _this$props2$componen = _this$props2.components.header,\n          HeaderComponent = _this$props2$componen === void 0 ? Header : _this$props2$componen;\n      var today = getNow();\n      return range.map(function (date, i) {\n        var drilldownView = getDrilldownView(date);\n        var label = localizer.format(date, 'dayFormat');\n\n        var _dayProp = dayProp(date),\n            className = _dayProp.className,\n            style = _dayProp.style;\n\n        var header = /*#__PURE__*/React.createElement(HeaderComponent, {\n          date: date,\n          label: label,\n          localizer: localizer\n        });\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: i,\n          style: style,\n          className: clsx('rbc-header', className, localizer.isSameDate(date, today) && 'rbc-today')\n        }, drilldownView ? /*#__PURE__*/React.createElement(\"button\", {\n          type: \"button\",\n          className: \"rbc-button-link\",\n          onClick: function onClick(e) {\n            return _this2.handleHeaderClick(date, drilldownView, e);\n          }\n        }, header) : /*#__PURE__*/React.createElement(\"span\", null, header));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props3 = this.props,\n          width = _this$props3.width,\n          rtl = _this$props3.rtl,\n          resources = _this$props3.resources,\n          range = _this$props3.range,\n          events = _this$props3.events,\n          getNow = _this$props3.getNow,\n          accessors = _this$props3.accessors,\n          selectable = _this$props3.selectable,\n          components = _this$props3.components,\n          getters = _this$props3.getters,\n          scrollRef = _this$props3.scrollRef,\n          localizer = _this$props3.localizer,\n          isOverflowing = _this$props3.isOverflowing,\n          _this$props3$componen = _this$props3.components,\n          TimeGutterHeader = _this$props3$componen.timeGutterHeader,\n          _this$props3$componen2 = _this$props3$componen.resourceHeader,\n          ResourceHeaderComponent = _this$props3$componen2 === void 0 ? ResourceHeader : _this$props3$componen2,\n          resizable = _this$props3.resizable;\n      var style = {};\n\n      if (isOverflowing) {\n        style[rtl ? 'marginLeft' : 'marginRight'] = \"\".concat(scrollbarSize(), \"px\");\n      }\n\n      var groupedEvents = resources.groupEvents(events);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: style,\n        ref: scrollRef,\n        className: clsx('rbc-time-header', isOverflowing && 'rbc-overflowing')\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"rbc-label rbc-time-header-gutter\",\n        style: {\n          width: width,\n          minWidth: width,\n          maxWidth: width\n        }\n      }, TimeGutterHeader && /*#__PURE__*/React.createElement(TimeGutterHeader, null)), resources.map(function (_ref, idx) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            id = _ref2[0],\n            resource = _ref2[1];\n\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"rbc-time-header-content\",\n          key: id || idx\n        }, resource && /*#__PURE__*/React.createElement(\"div\", {\n          className: \"rbc-row rbc-row-resource\",\n          key: \"resource_\".concat(idx)\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"rbc-header\"\n        }, /*#__PURE__*/React.createElement(ResourceHeaderComponent, {\n          index: idx,\n          label: accessors.resourceTitle(resource),\n          resource: resource\n        }))), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"rbc-row rbc-time-header-cell\".concat(range.length <= 1 ? ' rbc-time-header-cell-single-day' : '')\n        }, _this3.renderHeaderCells(range)), /*#__PURE__*/React.createElement(DateContentRow, {\n          isAllDay: true,\n          rtl: rtl,\n          getNow: getNow,\n          minRows: 2,\n          range: range,\n          events: groupedEvents.get(id) || [],\n          resourceId: resource && id,\n          className: \"rbc-allday-cell\",\n          selectable: selectable,\n          selected: _this3.props.selected,\n          components: components,\n          accessors: accessors,\n          getters: getters,\n          localizer: localizer,\n          onSelect: _this3.props.onSelectEvent,\n          onDoubleClick: _this3.props.onDoubleClickEvent,\n          onKeyPress: _this3.props.onKeyPressEvent,\n          onSelectSlot: _this3.props.onSelectSlot,\n          longPressThreshold: _this3.props.longPressThreshold,\n          resizable: resizable\n        }));\n      }));\n    }\n  }]);\n\n  return TimeGridHeader;\n}(React.Component);\n\nvar NONE = {};\n\nfunction Resources(resources, accessors) {\n  return {\n    map: function map(fn) {\n      if (!resources) return [fn([NONE, null], 0)];\n      return resources.map(function (resource, idx) {\n        return fn([accessors.resourceId(resource), resource], idx);\n      });\n    },\n    groupEvents: function groupEvents(events) {\n      var eventsByResource = new Map();\n\n      if (!resources) {\n        // Return all events if resources are not provided\n        eventsByResource.set(NONE, events);\n        return eventsByResource;\n      }\n\n      events.forEach(function (event) {\n        var id = accessors.resource(event) || NONE;\n        var resourceEvents = eventsByResource.get(id) || [];\n        resourceEvents.push(event);\n        eventsByResource.set(id, resourceEvents);\n      });\n      return eventsByResource;\n    }\n  };\n}\n\nvar TimeGrid = /*#__PURE__*/function (_Component) {\n  _inherits(TimeGrid, _Component);\n\n  var _super = _createSuper(TimeGrid);\n\n  function TimeGrid(props) {\n    var _this;\n\n    _classCallCheck(this, TimeGrid);\n\n    _this = _super.call(this, props);\n\n    _this.handleScroll = function (e) {\n      if (_this.scrollRef.current) {\n        _this.scrollRef.current.scrollLeft = e.target.scrollLeft;\n      }\n    };\n\n    _this.handleResize = function () {\n      animationFrame.cancel(_this.rafHandle);\n      _this.rafHandle = animationFrame.request(_this.checkOverflow);\n    };\n\n    _this.handleSelectAlldayEvent = function () {\n      //cancel any pending selections so only the event click goes through.\n      _this.clearSelection();\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      notify(_this.props.onSelectEvent, args);\n    };\n\n    _this.handleSelectAllDaySlot = function (slots, slotInfo) {\n      var onSelectSlot = _this.props.onSelectSlot;\n      var start = new Date(slots[0]);\n      var end = new Date(slots[slots.length - 1]);\n      end.setDate(slots[slots.length - 1].getDate() + 1);\n      notify(onSelectSlot, {\n        slots: slots,\n        start: start,\n        end: end,\n        action: slotInfo.action,\n        resourceId: slotInfo.resourceId\n      });\n    };\n\n    _this.checkOverflow = function () {\n      if (_this._updatingOverflow) return;\n      var content = _this.contentRef.current;\n      var isOverflowing = content.scrollHeight > content.clientHeight;\n\n      if (_this.state.isOverflowing !== isOverflowing) {\n        _this._updatingOverflow = true;\n\n        _this.setState({\n          isOverflowing: isOverflowing\n        }, function () {\n          _this._updatingOverflow = false;\n        });\n      }\n    };\n\n    _this.memoizedResources = memoize(function (resources, accessors) {\n      return Resources(resources, accessors);\n    });\n    _this.state = {\n      gutterWidth: undefined,\n      isOverflowing: null\n    };\n    _this.scrollRef = /*#__PURE__*/React.createRef();\n    _this.contentRef = /*#__PURE__*/React.createRef();\n    _this._scrollRatio = null;\n    _this.gutterRef = /*#__PURE__*/createRef();\n    return _this;\n  }\n\n  _createClass(TimeGrid, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function UNSAFE_componentWillMount() {\n      this.calculateScroll();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.checkOverflow();\n\n      if (this.props.width == null) {\n        this.measureGutter();\n      }\n\n      this.applyScroll();\n      window.addEventListener('resize', this.handleResize);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.handleResize);\n      animationFrame.cancel(this.rafHandle);\n\n      if (this.measureGutterAnimationFrameRequest) {\n        window.cancelAnimationFrame(this.measureGutterAnimationFrameRequest);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.props.width == null) {\n        this.measureGutter();\n      }\n\n      this.applyScroll(); //this.checkOverflow()\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      var _this$props = this.props,\n          range = _this$props.range,\n          scrollToTime = _this$props.scrollToTime,\n          localizer = _this$props.localizer; // When paginating, reset scroll\n\n      if (localizer.neq(nextProps.range[0], range[0], 'minutes') || localizer.neq(nextProps.scrollToTime, scrollToTime, 'minutes')) {\n        this.calculateScroll(nextProps);\n      }\n    }\n  }, {\n    key: \"renderEvents\",\n    value: function renderEvents(range, events, backgroundEvents, now) {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          min = _this$props2.min,\n          max = _this$props2.max,\n          components = _this$props2.components,\n          accessors = _this$props2.accessors,\n          localizer = _this$props2.localizer,\n          dayLayoutAlgorithm = _this$props2.dayLayoutAlgorithm;\n      var resources = this.memoizedResources(this.props.resources, accessors);\n      var groupedEvents = resources.groupEvents(events);\n      var groupedBackgroundEvents = resources.groupEvents(backgroundEvents);\n      return resources.map(function (_ref, i) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            id = _ref2[0],\n            resource = _ref2[1];\n\n        return range.map(function (date, jj) {\n          var daysEvents = (groupedEvents.get(id) || []).filter(function (event) {\n            return localizer.inRange(date, accessors.start(event), accessors.end(event), 'day');\n          });\n          var daysBackgroundEvents = (groupedBackgroundEvents.get(id) || []).filter(function (event) {\n            return localizer.inRange(date, accessors.start(event), accessors.end(event), 'day');\n          });\n          return /*#__PURE__*/React.createElement(DayColumn, Object.assign({}, _this2.props, {\n            localizer: localizer,\n            min: localizer.merge(date, min),\n            max: localizer.merge(date, max),\n            resource: resource && id,\n            components: components,\n            isNow: localizer.isSameDate(date, now),\n            key: i + '-' + jj,\n            date: date,\n            events: daysEvents,\n            backgroundEvents: daysBackgroundEvents,\n            dayLayoutAlgorithm: dayLayoutAlgorithm\n          }));\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          events = _this$props3.events,\n          backgroundEvents = _this$props3.backgroundEvents,\n          range = _this$props3.range,\n          width = _this$props3.width,\n          rtl = _this$props3.rtl,\n          selected = _this$props3.selected,\n          getNow = _this$props3.getNow,\n          resources = _this$props3.resources,\n          components = _this$props3.components,\n          accessors = _this$props3.accessors,\n          getters = _this$props3.getters,\n          localizer = _this$props3.localizer,\n          min = _this$props3.min,\n          max = _this$props3.max,\n          showMultiDayTimes = _this$props3.showMultiDayTimes,\n          longPressThreshold = _this$props3.longPressThreshold,\n          resizable = _this$props3.resizable;\n      width = width || this.state.gutterWidth;\n      var start = range[0],\n          end = range[range.length - 1];\n      this.slots = range.length;\n      var allDayEvents = [],\n          rangeEvents = [],\n          rangeBackgroundEvents = [];\n      events.forEach(function (event) {\n        if (inRange(event, start, end, accessors, localizer)) {\n          var eStart = accessors.start(event),\n              eEnd = accessors.end(event);\n\n          if (accessors.allDay(event) || localizer.startAndEndAreDateOnly(eStart, eEnd) || !showMultiDayTimes && !localizer.isSameDate(eStart, eEnd)) {\n            allDayEvents.push(event);\n          } else {\n            rangeEvents.push(event);\n          }\n        }\n      });\n      backgroundEvents.forEach(function (event) {\n        if (inRange(event, start, end, accessors, localizer)) {\n          rangeBackgroundEvents.push(event);\n        }\n      });\n      allDayEvents.sort(function (a, b) {\n        return sortEvents(a, b, accessors, localizer);\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: clsx('rbc-time-view', resources && 'rbc-time-view-resources')\n      }, /*#__PURE__*/React.createElement(TimeGridHeader, {\n        range: range,\n        events: allDayEvents,\n        width: width,\n        rtl: rtl,\n        getNow: getNow,\n        localizer: localizer,\n        selected: selected,\n        resources: this.memoizedResources(resources, accessors),\n        selectable: this.props.selectable,\n        accessors: accessors,\n        getters: getters,\n        components: components,\n        scrollRef: this.scrollRef,\n        isOverflowing: this.state.isOverflowing,\n        longPressThreshold: longPressThreshold,\n        onSelectSlot: this.handleSelectAllDaySlot,\n        onSelectEvent: this.handleSelectAlldayEvent,\n        onDoubleClickEvent: this.props.onDoubleClickEvent,\n        onKeyPressEvent: this.props.onKeyPressEvent,\n        onDrillDown: this.props.onDrillDown,\n        getDrilldownView: this.props.getDrilldownView,\n        resizable: resizable\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.contentRef,\n        className: \"rbc-time-content\",\n        onScroll: this.handleScroll\n      }, /*#__PURE__*/React.createElement(TimeGutter$1, {\n        date: start,\n        ref: this.gutterRef,\n        localizer: localizer,\n        min: localizer.merge(start, min),\n        max: localizer.merge(start, max),\n        step: this.props.step,\n        getNow: this.props.getNow,\n        timeslots: this.props.timeslots,\n        components: components,\n        className: \"rbc-time-gutter\",\n        getters: getters\n      }), this.renderEvents(range, rangeEvents, rangeBackgroundEvents, getNow())));\n    }\n  }, {\n    key: \"clearSelection\",\n    value: function clearSelection() {\n      clearTimeout(this._selectTimer);\n      this._pendingSelection = [];\n    }\n  }, {\n    key: \"measureGutter\",\n    value: function measureGutter() {\n      var _this3 = this;\n\n      if (this.measureGutterAnimationFrameRequest) {\n        window.cancelAnimationFrame(this.measureGutterAnimationFrameRequest);\n      }\n\n      this.measureGutterAnimationFrameRequest = window.requestAnimationFrame(function () {\n        var _this3$gutterRef;\n\n        var width = getWidth((_this3$gutterRef = _this3.gutterRef) === null || _this3$gutterRef === void 0 ? void 0 : _this3$gutterRef.current);\n\n        if (width && _this3.state.gutterWidth !== width) {\n          _this3.setState({\n            gutterWidth: width\n          });\n        }\n      });\n    }\n  }, {\n    key: \"applyScroll\",\n    value: function applyScroll() {\n      // If auto-scroll is disabled, we don't actually apply the scroll\n      if (this._scrollRatio != null && this.props.enableAutoScroll === true) {\n        var content = this.contentRef.current;\n        content.scrollTop = content.scrollHeight * this._scrollRatio; // Only do this once\n\n        this._scrollRatio = null;\n      }\n    }\n  }, {\n    key: \"calculateScroll\",\n    value: function calculateScroll() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var min = props.min,\n          max = props.max,\n          scrollToTime = props.scrollToTime,\n          localizer = props.localizer;\n      var diffMillis = scrollToTime - localizer.startOf(scrollToTime, 'day');\n      var totalMillis = localizer.diff(min, max, 'milliseconds');\n      this._scrollRatio = diffMillis / totalMillis;\n    }\n  }]);\n\n  return TimeGrid;\n}(Component);\n\nTimeGrid.defaultProps = {\n  step: 30,\n  timeslots: 2\n};\nvar _excluded$4 = [\"date\", \"localizer\", \"min\", \"max\", \"scrollToTime\", \"enableAutoScroll\"];\n\nvar Day = /*#__PURE__*/function (_React$Component) {\n  _inherits(Day, _React$Component);\n\n  var _super = _createSuper(Day);\n\n  function Day() {\n    _classCallCheck(this, Day);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Day, [{\n    key: \"render\",\n    value: function render() {\n      /**\n       * This allows us to default min, max, and scrollToTime\n       * using our localizer. This is necessary until such time\n       * as TimeGrid is converted to a functional component.\n       */\n      var _this$props = this.props,\n          date = _this$props.date,\n          localizer = _this$props.localizer,\n          _this$props$min = _this$props.min,\n          min = _this$props$min === void 0 ? localizer.startOf(new Date(), 'day') : _this$props$min,\n          _this$props$max = _this$props.max,\n          max = _this$props$max === void 0 ? localizer.endOf(new Date(), 'day') : _this$props$max,\n          _this$props$scrollToT = _this$props.scrollToTime,\n          scrollToTime = _this$props$scrollToT === void 0 ? localizer.startOf(new Date(), 'day') : _this$props$scrollToT,\n          _this$props$enableAut = _this$props.enableAutoScroll,\n          enableAutoScroll = _this$props$enableAut === void 0 ? true : _this$props$enableAut,\n          props = _objectWithoutProperties(_this$props, _excluded$4);\n\n      var range = Day.range(date, {\n        localizer: localizer\n      });\n      return /*#__PURE__*/React.createElement(TimeGrid, Object.assign({}, props, {\n        range: range,\n        eventOffset: 10,\n        localizer: localizer,\n        min: min,\n        max: max,\n        scrollToTime: scrollToTime,\n        enableAutoScroll: enableAutoScroll\n      }));\n    }\n  }]);\n\n  return Day;\n}(React.Component);\n\nDay.range = function (date, _ref) {\n  var localizer = _ref.localizer;\n  return [localizer.startOf(date, 'day')];\n};\n\nDay.navigate = function (date, action, _ref2) {\n  var localizer = _ref2.localizer;\n\n  switch (action) {\n    case navigate.PREVIOUS:\n      return localizer.add(date, -1, 'day');\n\n    case navigate.NEXT:\n      return localizer.add(date, 1, 'day');\n\n    default:\n      return date;\n  }\n};\n\nDay.title = function (date, _ref3) {\n  var localizer = _ref3.localizer;\n  return localizer.format(date, 'dayHeaderFormat');\n};\n\nvar _excluded$3 = [\"date\", \"localizer\", \"min\", \"max\", \"scrollToTime\", \"enableAutoScroll\"];\n\nvar Week = /*#__PURE__*/function (_React$Component) {\n  _inherits(Week, _React$Component);\n\n  var _super = _createSuper(Week);\n\n  function Week() {\n    _classCallCheck(this, Week);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Week, [{\n    key: \"render\",\n    value: function render() {\n      /**\n       * This allows us to default min, max, and scrollToTime\n       * using our localizer. This is necessary until such time\n       * as TimeGrid is converted to a functional component.\n       */\n      var _this$props = this.props,\n          date = _this$props.date,\n          localizer = _this$props.localizer,\n          _this$props$min = _this$props.min,\n          min = _this$props$min === void 0 ? localizer.startOf(new Date(), 'day') : _this$props$min,\n          _this$props$max = _this$props.max,\n          max = _this$props$max === void 0 ? localizer.endOf(new Date(), 'day') : _this$props$max,\n          _this$props$scrollToT = _this$props.scrollToTime,\n          scrollToTime = _this$props$scrollToT === void 0 ? localizer.startOf(new Date(), 'day') : _this$props$scrollToT,\n          _this$props$enableAut = _this$props.enableAutoScroll,\n          enableAutoScroll = _this$props$enableAut === void 0 ? true : _this$props$enableAut,\n          props = _objectWithoutProperties(_this$props, _excluded$3);\n\n      var range = Week.range(date, this.props);\n      return /*#__PURE__*/React.createElement(TimeGrid, Object.assign({}, props, {\n        range: range,\n        eventOffset: 15,\n        localizer: localizer,\n        min: min,\n        max: max,\n        scrollToTime: scrollToTime,\n        enableAutoScroll: enableAutoScroll\n      }));\n    }\n  }]);\n\n  return Week;\n}(React.Component);\n\nWeek.defaultProps = TimeGrid.defaultProps;\n\nWeek.navigate = function (date, action, _ref) {\n  var localizer = _ref.localizer;\n\n  switch (action) {\n    case navigate.PREVIOUS:\n      return localizer.add(date, -1, 'week');\n\n    case navigate.NEXT:\n      return localizer.add(date, 1, 'week');\n\n    default:\n      return date;\n  }\n};\n\nWeek.range = function (date, _ref2) {\n  var localizer = _ref2.localizer;\n  var firstOfWeek = localizer.startOfWeek();\n  var start = localizer.startOf(date, 'week', firstOfWeek);\n  var end = localizer.endOf(date, 'week', firstOfWeek);\n  return localizer.range(start, end);\n};\n\nWeek.title = function (date, _ref3) {\n  var localizer = _ref3.localizer;\n\n  var _Week$range = Week.range(date, {\n    localizer: localizer\n  }),\n      _Week$range2 = _toArray(_Week$range),\n      start = _Week$range2[0],\n      rest = _Week$range2.slice(1);\n\n  return localizer.format({\n    start: start,\n    end: rest.pop()\n  }, 'dayRangeHeaderFormat');\n};\n\nvar _excluded$2 = [\"date\", \"localizer\", \"min\", \"max\", \"scrollToTime\", \"enableAutoScroll\"];\n\nfunction workWeekRange(date, options) {\n  return Week.range(date, options).filter(function (d) {\n    return [6, 0].indexOf(d.getDay()) === -1;\n  });\n}\n\nvar WorkWeek = /*#__PURE__*/function (_React$Component) {\n  _inherits(WorkWeek, _React$Component);\n\n  var _super = _createSuper(WorkWeek);\n\n  function WorkWeek() {\n    _classCallCheck(this, WorkWeek);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(WorkWeek, [{\n    key: \"render\",\n    value: function render() {\n      /**\n       * This allows us to default min, max, and scrollToTime\n       * using our localizer. This is necessary until such time\n       * as TimeGrid is converted to a functional component.\n       */\n      var _this$props = this.props,\n          date = _this$props.date,\n          localizer = _this$props.localizer,\n          _this$props$min = _this$props.min,\n          min = _this$props$min === void 0 ? localizer.startOf(new Date(), 'day') : _this$props$min,\n          _this$props$max = _this$props.max,\n          max = _this$props$max === void 0 ? localizer.endOf(new Date(), 'day') : _this$props$max,\n          _this$props$scrollToT = _this$props.scrollToTime,\n          scrollToTime = _this$props$scrollToT === void 0 ? localizer.startOf(new Date(), 'day') : _this$props$scrollToT,\n          _this$props$enableAut = _this$props.enableAutoScroll,\n          enableAutoScroll = _this$props$enableAut === void 0 ? true : _this$props$enableAut,\n          props = _objectWithoutProperties(_this$props, _excluded$2);\n\n      var range = workWeekRange(date, this.props);\n      return /*#__PURE__*/React.createElement(TimeGrid, Object.assign({}, props, {\n        range: range,\n        eventOffset: 15,\n        localizer: localizer,\n        min: min,\n        max: max,\n        scrollToTime: scrollToTime,\n        enableAutoScroll: enableAutoScroll\n      }));\n    }\n  }]);\n\n  return WorkWeek;\n}(React.Component);\n\nWorkWeek.defaultProps = TimeGrid.defaultProps;\nWorkWeek.range = workWeekRange;\nWorkWeek.navigate = Week.navigate;\n\nWorkWeek.title = function (date, _ref) {\n  var localizer = _ref.localizer;\n\n  var _workWeekRange = workWeekRange(date, {\n    localizer: localizer\n  }),\n      _workWeekRange2 = _toArray(_workWeekRange),\n      start = _workWeekRange2[0],\n      rest = _workWeekRange2.slice(1);\n\n  return localizer.format({\n    start: start,\n    end: rest.pop()\n  }, 'dayRangeHeaderFormat');\n};\n\nfunction Agenda(_ref) {\n  var accessors = _ref.accessors,\n      components = _ref.components,\n      date = _ref.date,\n      events = _ref.events,\n      getters = _ref.getters,\n      length = _ref.length,\n      localizer = _ref.localizer,\n      onDoubleClickEvent = _ref.onDoubleClickEvent,\n      onSelectEvent = _ref.onSelectEvent,\n      selected = _ref.selected;\n  var headerRef = useRef(null);\n  var dateColRef = useRef(null);\n  var timeColRef = useRef(null);\n  var contentRef = useRef(null);\n  var tbodyRef = useRef(null);\n  useEffect(function () {\n    _adjustHeader();\n  });\n\n  var renderDay = function renderDay(day, events, dayKey) {\n    var Event = components.event,\n        AgendaDate = components.date;\n    events = events.filter(function (e) {\n      return inRange(e, localizer.startOf(day, 'day'), localizer.endOf(day, 'day'), accessors, localizer);\n    });\n    return events.map(function (event, idx) {\n      var title = accessors.title(event);\n      var end = accessors.end(event);\n      var start = accessors.start(event);\n      var userProps = getters.eventProp(event, start, end, isSelected(event, selected));\n      var dateLabel = idx === 0 && localizer.format(day, 'agendaDateFormat');\n      var first = idx === 0 ? /*#__PURE__*/React.createElement(\"td\", {\n        rowSpan: events.length,\n        className: \"rbc-agenda-date-cell\"\n      }, AgendaDate ? /*#__PURE__*/React.createElement(AgendaDate, {\n        day: day,\n        label: dateLabel\n      }) : dateLabel) : false;\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        key: dayKey + '_' + idx,\n        className: userProps.className,\n        style: userProps.style\n      }, first, /*#__PURE__*/React.createElement(\"td\", {\n        className: \"rbc-agenda-time-cell\"\n      }, timeRangeLabel(day, event)), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"rbc-agenda-event-cell\",\n        onClick: function onClick(e) {\n          return onSelectEvent && onSelectEvent(event, e);\n        },\n        onDoubleClick: function onDoubleClick(e) {\n          return onDoubleClickEvent && onDoubleClickEvent(event, e);\n        }\n      }, Event ? /*#__PURE__*/React.createElement(Event, {\n        event: event,\n        title: title\n      }) : title));\n    }, []);\n  };\n\n  var timeRangeLabel = function timeRangeLabel(day, event) {\n    var labelClass = '',\n        TimeComponent = components.time,\n        label = localizer.messages.allDay;\n    var end = accessors.end(event);\n    var start = accessors.start(event);\n\n    if (!accessors.allDay(event)) {\n      if (localizer.eq(start, end)) {\n        label = localizer.format(start, 'agendaTimeFormat');\n      } else if (localizer.isSameDate(start, end)) {\n        label = localizer.format({\n          start: start,\n          end: end\n        }, 'agendaTimeRangeFormat');\n      } else if (localizer.isSameDate(day, start)) {\n        label = localizer.format(start, 'agendaTimeFormat');\n      } else if (localizer.isSameDate(day, end)) {\n        label = localizer.format(end, 'agendaTimeFormat');\n      }\n    }\n\n    if (localizer.gt(day, start, 'day')) labelClass = 'rbc-continues-prior';\n    if (localizer.lt(day, end, 'day')) labelClass += ' rbc-continues-after';\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: labelClass.trim()\n    }, TimeComponent ? /*#__PURE__*/React.createElement(TimeComponent, {\n      event: event,\n      day: day,\n      label: label\n    }) : label);\n  };\n\n  var _adjustHeader = function _adjustHeader() {\n    if (!tbodyRef.current) return;\n    var header = headerRef.current;\n    var firstRow = tbodyRef.current.firstChild;\n    if (!firstRow) return;\n    var isOverflowing = contentRef.current.scrollHeight > contentRef.current.clientHeight;\n    var _widths = [];\n    var widths = _widths;\n    _widths = [getWidth(firstRow.children[0]), getWidth(firstRow.children[1])];\n\n    if (widths[0] !== _widths[0] || widths[1] !== _widths[1]) {\n      dateColRef.current.style.width = _widths[0] + 'px';\n      timeColRef.current.style.width = _widths[1] + 'px';\n    }\n\n    if (isOverflowing) {\n      addClass(header, 'rbc-header-overflowing');\n      header.style.marginRight = scrollbarSize() + 'px';\n    } else {\n      removeClass(header, 'rbc-header-overflowing');\n    }\n  };\n\n  var messages = localizer.messages;\n  var end = localizer.add(date, length, 'day');\n  var range = localizer.range(date, end, 'day');\n  events = events.filter(function (event) {\n    return inRange(event, localizer.startOf(date, 'day'), localizer.endOf(end, 'day'), accessors, localizer);\n  });\n  events.sort(function (a, b) {\n    return +accessors.start(a) - +accessors.start(b);\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"rbc-agenda-view\"\n  }, events.length !== 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"table\", {\n    ref: headerRef,\n    className: \"rbc-agenda-table\"\n  }, /*#__PURE__*/React.createElement(\"thead\", null, /*#__PURE__*/React.createElement(\"tr\", null, /*#__PURE__*/React.createElement(\"th\", {\n    className: \"rbc-header\",\n    ref: dateColRef\n  }, messages.date), /*#__PURE__*/React.createElement(\"th\", {\n    className: \"rbc-header\",\n    ref: timeColRef\n  }, messages.time), /*#__PURE__*/React.createElement(\"th\", {\n    className: \"rbc-header\"\n  }, messages.event)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"rbc-agenda-content\",\n    ref: contentRef\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"rbc-agenda-table\"\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    ref: tbodyRef\n  }, range.map(function (day, idx) {\n    return renderDay(day, events, idx);\n  }))))) : /*#__PURE__*/React.createElement(\"span\", {\n    className: \"rbc-agenda-empty\"\n  }, messages.noEventsInRange));\n}\n\nAgenda.defaultProps = {\n  length: 30\n};\n\nAgenda.range = function (start, _ref2) {\n  var _ref2$length = _ref2.length,\n      length = _ref2$length === void 0 ? Agenda.defaultProps.length : _ref2$length,\n      localizer = _ref2.localizer;\n  var end = localizer.add(start, length, 'day');\n  return {\n    start: start,\n    end: end\n  };\n};\n\nAgenda.navigate = function (date, action, _ref3) {\n  var _ref3$length = _ref3.length,\n      length = _ref3$length === void 0 ? Agenda.defaultProps.length : _ref3$length,\n      localizer = _ref3.localizer;\n\n  switch (action) {\n    case navigate.PREVIOUS:\n      return localizer.add(date, -length, 'day');\n\n    case navigate.NEXT:\n      return localizer.add(date, length, 'day');\n\n    default:\n      return date;\n  }\n};\n\nAgenda.title = function (start, _ref4) {\n  var _ref4$length = _ref4.length,\n      length = _ref4$length === void 0 ? Agenda.defaultProps.length : _ref4$length,\n      localizer = _ref4.localizer;\n  var end = localizer.add(start, length, 'day');\n  return localizer.format({\n    start: start,\n    end: end\n  }, 'agendaHeaderFormat');\n};\n\nvar _VIEWS;\n\nvar VIEWS = (_VIEWS = {}, _defineProperty(_VIEWS, views.MONTH, MonthView), _defineProperty(_VIEWS, views.WEEK, Week), _defineProperty(_VIEWS, views.WORK_WEEK, WorkWeek), _defineProperty(_VIEWS, views.DAY, Day), _defineProperty(_VIEWS, views.AGENDA, Agenda), _VIEWS);\nvar _excluded$1 = [\"action\", \"date\", \"today\"];\n\nfunction moveDate(View, _ref) {\n  var action = _ref.action,\n      date = _ref.date,\n      today = _ref.today,\n      props = _objectWithoutProperties(_ref, _excluded$1);\n\n  View = typeof View === 'string' ? VIEWS[View] : View;\n\n  switch (action) {\n    case navigate.TODAY:\n      date = today || new Date();\n      break;\n\n    case navigate.DATE:\n      break;\n\n    default:\n      invariant(View && typeof View.navigate === 'function', 'Calendar View components must implement a static `.navigate(date, action)` method.s');\n      date = View.navigate(date, action, props);\n  }\n\n  return date;\n}\n\nvar Toolbar = /*#__PURE__*/function (_React$Component) {\n  _inherits(Toolbar, _React$Component);\n\n  var _super = _createSuper(Toolbar);\n\n  function Toolbar() {\n    var _this;\n\n    _classCallCheck(this, Toolbar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.navigate = function (action) {\n      _this.props.onNavigate(action);\n    };\n\n    _this.view = function (view) {\n      _this.props.onView(view);\n    };\n\n    return _this;\n  }\n\n  _createClass(Toolbar, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          messages = _this$props.localizer.messages,\n          label = _this$props.label;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"rbc-toolbar\"\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"rbc-btn-group\"\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.navigate.bind(null, navigate.TODAY)\n      }, messages.today), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.navigate.bind(null, navigate.PREVIOUS)\n      }, messages.previous), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.navigate.bind(null, navigate.NEXT)\n      }, messages.next)), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"rbc-toolbar-label\"\n      }, label), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"rbc-btn-group\"\n      }, this.viewNamesGroup(messages)));\n    }\n  }, {\n    key: \"viewNamesGroup\",\n    value: function viewNamesGroup(messages) {\n      var _this2 = this;\n\n      var viewNames = this.props.views;\n      var view = this.props.view;\n\n      if (viewNames.length > 1) {\n        return viewNames.map(function (name) {\n          return /*#__PURE__*/React.createElement(\"button\", {\n            type: \"button\",\n            key: name,\n            className: clsx({\n              'rbc-active': view === name\n            }),\n            onClick: _this2.view.bind(null, name)\n          }, messages[name]);\n        });\n      }\n    }\n  }]);\n\n  return Toolbar;\n}(React.Component);\n/**\n * Retrieve via an accessor-like property\n *\n *    accessor(obj, 'name')   // => retrieves obj['name']\n *    accessor(data, func)    // => retrieves func(data)\n *    ... otherwise null\n */\n\n\nfunction accessor(data, field) {\n  var value = null;\n  if (typeof field === 'function') value = field(data);else if (typeof field === 'string' && _typeof(data) === 'object' && data != null && field in data) value = data[field];\n  return value;\n}\n\nvar wrapAccessor = function wrapAccessor(acc) {\n  return function (data) {\n    return accessor(data, acc);\n  };\n};\n\nvar _excluded = [\"view\", \"date\", \"getNow\", \"onNavigate\"],\n    _excluded2 = [\"view\", \"toolbar\", \"events\", \"backgroundEvents\", \"style\", \"className\", \"elementProps\", \"date\", \"getNow\", \"length\", \"showMultiDayTimes\", \"onShowMore\", \"doShowMoreDrillDown\", \"components\", \"formats\", \"messages\", \"culture\"];\n\nfunction viewNames(_views) {\n  return !Array.isArray(_views) ? Object.keys(_views) : _views;\n}\n\nfunction isValidView(view, _ref) {\n  var _views = _ref.views;\n  var names = viewNames(_views);\n  return names.indexOf(view) !== -1;\n}\n\nvar Calendar = /*#__PURE__*/function (_React$Component) {\n  _inherits(Calendar, _React$Component);\n\n  var _super = _createSuper(Calendar);\n\n  function Calendar() {\n    var _this;\n\n    _classCallCheck(this, Calendar);\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(_args));\n\n    _this.getViews = function () {\n      var views = _this.props.views;\n\n      if (Array.isArray(views)) {\n        return transform(views, function (obj, name) {\n          return obj[name] = VIEWS[name];\n        }, {});\n      }\n\n      if (_typeof(views) === 'object') {\n        return mapValues(views, function (value, key) {\n          if (value === true) {\n            return VIEWS[key];\n          }\n\n          return value;\n        });\n      }\n\n      return VIEWS;\n    };\n\n    _this.getView = function () {\n      var views = _this.getViews();\n\n      return views[_this.props.view];\n    };\n\n    _this.getDrilldownView = function (date) {\n      var _this$props = _this.props,\n          view = _this$props.view,\n          drilldownView = _this$props.drilldownView,\n          getDrilldownView = _this$props.getDrilldownView;\n      if (!getDrilldownView) return drilldownView;\n      return getDrilldownView(date, view, Object.keys(_this.getViews()));\n    };\n\n    _this.handleRangeChange = function (date, viewComponent, view) {\n      var _this$props2 = _this.props,\n          onRangeChange = _this$props2.onRangeChange,\n          localizer = _this$props2.localizer;\n\n      if (onRangeChange) {\n        if (viewComponent.range) {\n          onRangeChange(viewComponent.range(date, {\n            localizer: localizer\n          }), view);\n        } else {\n          if (process.env.NODE_ENV !== 'production') {\n            console.error('onRangeChange prop not supported for this view');\n          }\n        }\n      }\n    };\n\n    _this.handleNavigate = function (action, newDate) {\n      var _this$props3 = _this.props,\n          view = _this$props3.view,\n          date = _this$props3.date,\n          getNow = _this$props3.getNow,\n          onNavigate = _this$props3.onNavigate,\n          props = _objectWithoutProperties(_this$props3, _excluded);\n\n      var ViewComponent = _this.getView();\n\n      var today = getNow();\n      date = moveDate(ViewComponent, _objectSpread(_objectSpread({}, props), {}, {\n        action: action,\n        date: newDate || date || today,\n        today: today\n      }));\n      onNavigate(date, view, action);\n\n      _this.handleRangeChange(date, ViewComponent);\n    };\n\n    _this.handleViewChange = function (view) {\n      if (view !== _this.props.view && isValidView(view, _this.props)) {\n        _this.props.onView(view);\n      }\n\n      var views = _this.getViews();\n\n      _this.handleRangeChange(_this.props.date || _this.props.getNow(), views[view], view);\n    };\n\n    _this.handleSelectEvent = function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      notify(_this.props.onSelectEvent, args);\n    };\n\n    _this.handleDoubleClickEvent = function () {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      notify(_this.props.onDoubleClickEvent, args);\n    };\n\n    _this.handleKeyPressEvent = function () {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      notify(_this.props.onKeyPressEvent, args);\n    };\n\n    _this.handleSelectSlot = function (slotInfo) {\n      notify(_this.props.onSelectSlot, slotInfo);\n    };\n\n    _this.handleDrillDown = function (date, view) {\n      var onDrillDown = _this.props.onDrillDown;\n\n      if (onDrillDown) {\n        onDrillDown(date, view, _this.drilldownView);\n        return;\n      }\n\n      if (view) _this.handleViewChange(view);\n\n      _this.handleNavigate(navigate.DATE, date);\n    };\n\n    _this.state = {\n      context: _this.getContext(_this.props)\n    };\n    return _this;\n  }\n\n  _createClass(Calendar, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      this.setState({\n        context: this.getContext(nextProps)\n      });\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext(_ref2) {\n      var startAccessor = _ref2.startAccessor,\n          endAccessor = _ref2.endAccessor,\n          allDayAccessor = _ref2.allDayAccessor,\n          tooltipAccessor = _ref2.tooltipAccessor,\n          titleAccessor = _ref2.titleAccessor,\n          resourceAccessor = _ref2.resourceAccessor,\n          resourceIdAccessor = _ref2.resourceIdAccessor,\n          resourceTitleAccessor = _ref2.resourceTitleAccessor,\n          eventPropGetter = _ref2.eventPropGetter,\n          backgroundEventPropGetter = _ref2.backgroundEventPropGetter,\n          slotPropGetter = _ref2.slotPropGetter,\n          slotGroupPropGetter = _ref2.slotGroupPropGetter,\n          dayPropGetter = _ref2.dayPropGetter,\n          view = _ref2.view,\n          views = _ref2.views,\n          localizer = _ref2.localizer,\n          culture = _ref2.culture,\n          _ref2$messages = _ref2.messages,\n          messages$1 = _ref2$messages === void 0 ? {} : _ref2$messages,\n          _ref2$components = _ref2.components,\n          components = _ref2$components === void 0 ? {} : _ref2$components,\n          _ref2$formats = _ref2.formats,\n          formats = _ref2$formats === void 0 ? {} : _ref2$formats;\n      var names = viewNames(views);\n      var msgs = messages(messages$1);\n      return {\n        viewNames: names,\n        localizer: mergeWithDefaults(localizer, culture, formats, msgs),\n        getters: {\n          eventProp: function eventProp() {\n            return eventPropGetter && eventPropGetter.apply(void 0, arguments) || {};\n          },\n          backgroundEventProp: function backgroundEventProp() {\n            return backgroundEventPropGetter && backgroundEventPropGetter.apply(void 0, arguments) || {};\n          },\n          slotProp: function slotProp() {\n            return slotPropGetter && slotPropGetter.apply(void 0, arguments) || {};\n          },\n          slotGroupProp: function slotGroupProp() {\n            return slotGroupPropGetter && slotGroupPropGetter.apply(void 0, arguments) || {};\n          },\n          dayProp: function dayProp() {\n            return dayPropGetter && dayPropGetter.apply(void 0, arguments) || {};\n          }\n        },\n        components: defaults(components[view] || {}, omit(components, names), {\n          eventWrapper: NoopWrapper,\n          backgroundEventWrapper: NoopWrapper,\n          eventContainerWrapper: NoopWrapper,\n          dateCellWrapper: NoopWrapper,\n          weekWrapper: NoopWrapper,\n          timeSlotWrapper: NoopWrapper\n        }),\n        accessors: {\n          start: wrapAccessor(startAccessor),\n          end: wrapAccessor(endAccessor),\n          allDay: wrapAccessor(allDayAccessor),\n          tooltip: wrapAccessor(tooltipAccessor),\n          title: wrapAccessor(titleAccessor),\n          resource: wrapAccessor(resourceAccessor),\n          resourceId: wrapAccessor(resourceIdAccessor),\n          resourceTitle: wrapAccessor(resourceTitleAccessor)\n        }\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          view = _this$props4.view,\n          toolbar = _this$props4.toolbar,\n          events = _this$props4.events,\n          backgroundEvents = _this$props4.backgroundEvents,\n          style = _this$props4.style,\n          className = _this$props4.className,\n          elementProps = _this$props4.elementProps,\n          current = _this$props4.date,\n          getNow = _this$props4.getNow,\n          length = _this$props4.length,\n          showMultiDayTimes = _this$props4.showMultiDayTimes,\n          onShowMore = _this$props4.onShowMore,\n          doShowMoreDrillDown = _this$props4.doShowMoreDrillDown;\n      _this$props4.components;\n      _this$props4.formats;\n      _this$props4.messages;\n      _this$props4.culture;\n\n      var props = _objectWithoutProperties(_this$props4, _excluded2);\n\n      current = current || getNow();\n      var View = this.getView();\n      var _this$state$context = this.state.context,\n          accessors = _this$state$context.accessors,\n          components = _this$state$context.components,\n          getters = _this$state$context.getters,\n          localizer = _this$state$context.localizer,\n          viewNames = _this$state$context.viewNames;\n      var CalToolbar = components.toolbar || Toolbar;\n      var label = View.title(current, {\n        localizer: localizer,\n        length: length\n      });\n      return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, elementProps, {\n        className: clsx(className, 'rbc-calendar', props.rtl && 'rbc-rtl'),\n        style: style\n      }), toolbar && /*#__PURE__*/React.createElement(CalToolbar, {\n        date: current,\n        view: view,\n        views: viewNames,\n        label: label,\n        onView: this.handleViewChange,\n        onNavigate: this.handleNavigate,\n        localizer: localizer\n      }), /*#__PURE__*/React.createElement(View, Object.assign({}, props, {\n        events: events,\n        backgroundEvents: backgroundEvents,\n        date: current,\n        getNow: getNow,\n        length: length,\n        localizer: localizer,\n        getters: getters,\n        components: components,\n        accessors: accessors,\n        showMultiDayTimes: showMultiDayTimes,\n        getDrilldownView: this.getDrilldownView,\n        onNavigate: this.handleNavigate,\n        onDrillDown: this.handleDrillDown,\n        onSelectEvent: this.handleSelectEvent,\n        onDoubleClickEvent: this.handleDoubleClickEvent,\n        onKeyPressEvent: this.handleKeyPressEvent,\n        onSelectSlot: this.handleSelectSlot,\n        onShowMore: onShowMore,\n        doShowMoreDrillDown: doShowMoreDrillDown\n      })));\n    }\n    /**\n     *\n     * @param date\n     * @param viewComponent\n     * @param {'month'|'week'|'work_week'|'day'|'agenda'} [view] - optional\n     * parameter. It appears when range change on view changing. It could be handy\n     * when you need to have both: range and view type at once, i.e. for manage rbc\n     * state via url\n     */\n\n  }]);\n\n  return Calendar;\n}(React.Component);\n\nCalendar.defaultProps = {\n  events: [],\n  backgroundEvents: [],\n  elementProps: {},\n  popup: false,\n  toolbar: true,\n  view: views.MONTH,\n  views: [views.MONTH, views.WEEK, views.DAY, views.AGENDA],\n  step: 30,\n  length: 30,\n  doShowMoreDrillDown: true,\n  drilldownView: views.DAY,\n  titleAccessor: 'title',\n  tooltipAccessor: 'title',\n  allDayAccessor: 'allDay',\n  startAccessor: 'start',\n  endAccessor: 'end',\n  resourceAccessor: 'resourceId',\n  resourceIdAccessor: 'id',\n  resourceTitleAccessor: 'title',\n  longPressThreshold: 250,\n  getNow: function getNow() {\n    return new Date();\n  },\n  dayLayoutAlgorithm: 'overlap'\n};\nvar Calendar$1 = uncontrollable(Calendar, {\n  view: 'onView',\n  date: 'onNavigate',\n  selected: 'onSelectEvent'\n});\n\nvar weekRangeFormat$4 = function weekRangeFormat(_ref, culture, local) {\n  var start = _ref.start,\n      end = _ref.end;\n  return local.format(start, 'MMMM DD', culture) + ' – ' + // updated to use this localizer 'eq()' method\n  local.format(end, local.eq(start, end, 'month') ? 'DD' : 'MMMM DD', culture);\n};\n\nvar dateRangeFormat$4 = function dateRangeFormat(_ref2, culture, local) {\n  var start = _ref2.start,\n      end = _ref2.end;\n  return local.format(start, 'L', culture) + ' – ' + local.format(end, 'L', culture);\n};\n\nvar timeRangeFormat$4 = function timeRangeFormat(_ref3, culture, local) {\n  var start = _ref3.start,\n      end = _ref3.end;\n  return local.format(start, 'LT', culture) + ' – ' + local.format(end, 'LT', culture);\n};\n\nvar timeRangeStartFormat$4 = function timeRangeStartFormat(_ref4, culture, local) {\n  var start = _ref4.start;\n  return local.format(start, 'LT', culture) + ' – ';\n};\n\nvar timeRangeEndFormat$4 = function timeRangeEndFormat(_ref5, culture, local) {\n  var end = _ref5.end;\n  return ' – ' + local.format(end, 'LT', culture);\n};\n\nvar formats$4 = {\n  dateFormat: 'DD',\n  dayFormat: 'DD ddd',\n  weekdayFormat: 'ddd',\n  selectRangeFormat: timeRangeFormat$4,\n  eventTimeRangeFormat: timeRangeFormat$4,\n  eventTimeRangeStartFormat: timeRangeStartFormat$4,\n  eventTimeRangeEndFormat: timeRangeEndFormat$4,\n  timeGutterFormat: 'LT',\n  monthHeaderFormat: 'MMMM YYYY',\n  dayHeaderFormat: 'dddd MMM DD',\n  dayRangeHeaderFormat: weekRangeFormat$4,\n  agendaHeaderFormat: dateRangeFormat$4,\n  agendaDateFormat: 'ddd MMM DD',\n  agendaTimeFormat: 'LT',\n  agendaTimeRangeFormat: timeRangeFormat$4\n};\n\nfunction fixUnit$1(unit) {\n  var datePart = unit ? unit.toLowerCase() : unit;\n\n  if (datePart === 'FullYear') {\n    datePart = 'year';\n  } else if (!datePart) {\n    datePart = undefined;\n  }\n\n  return datePart;\n}\n\nfunction moment(moment) {\n  var locale = function locale(m, c) {\n    return c ? m.locale(c) : m;\n  };\n\n  function getTimezoneOffset(date) {\n    // ensures this gets cast to timezone\n    return moment(date).toDate().getTimezoneOffset();\n  }\n\n  function getDstOffset(start, end) {\n    var _st$_z$name, _st$_z; // convert to moment, in case\n\n\n    var st = moment(start);\n    var ed = moment(end); // if not using moment timezone\n\n    if (!moment.tz) {\n      return st.toDate().getTimezoneOffset() - ed.toDate().getTimezoneOffset();\n    }\n    /**\n     * If using moment-timezone, and a timezone has been applied, then\n     * use this to get the proper timezone offset, otherwise default\n     * the timezone to the browser local\n     */\n\n\n    var tzName = (_st$_z$name = st === null || st === void 0 ? void 0 : (_st$_z = st._z) === null || _st$_z === void 0 ? void 0 : _st$_z.name) !== null && _st$_z$name !== void 0 ? _st$_z$name : moment.tz.guess();\n    var startOffset = moment.tz.zone(tzName).utcOffset(+st);\n    var endOffset = moment.tz.zone(tzName).utcOffset(+ed);\n    return startOffset - endOffset;\n  }\n\n  function getDayStartDstOffset(start) {\n    var dayStart = moment(start).startOf('day');\n    return getDstOffset(dayStart, start);\n  }\n  /*** BEGIN localized date arithmetic methods with moment ***/\n\n\n  function defineComparators(a, b, unit) {\n    var datePart = fixUnit$1(unit);\n    var dtA = datePart ? moment(a).startOf(datePart) : moment(a);\n    var dtB = datePart ? moment(b).startOf(datePart) : moment(b);\n    return [dtA, dtB, datePart];\n  }\n\n  function startOf() {\n    var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var unit = arguments.length > 1 ? arguments[1] : undefined;\n    var datePart = fixUnit$1(unit);\n\n    if (datePart) {\n      return moment(date).startOf(datePart).toDate();\n    }\n\n    return moment(date).toDate();\n  }\n\n  function endOf() {\n    var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var unit = arguments.length > 1 ? arguments[1] : undefined;\n    var datePart = fixUnit$1(unit);\n\n    if (datePart) {\n      return moment(date).endOf(datePart).toDate();\n    }\n\n    return moment(date).toDate();\n  } // moment comparison operations *always* convert both sides to moment objects\n  // prior to running the comparisons\n\n\n  function eq(a, b, unit) {\n    var _defineComparators = defineComparators(a, b, unit),\n        _defineComparators2 = _slicedToArray(_defineComparators, 3),\n        dtA = _defineComparators2[0],\n        dtB = _defineComparators2[1],\n        datePart = _defineComparators2[2];\n\n    return dtA.isSame(dtB, datePart);\n  }\n\n  function neq(a, b, unit) {\n    return !eq(a, b, unit);\n  }\n\n  function gt(a, b, unit) {\n    var _defineComparators3 = defineComparators(a, b, unit),\n        _defineComparators4 = _slicedToArray(_defineComparators3, 3),\n        dtA = _defineComparators4[0],\n        dtB = _defineComparators4[1],\n        datePart = _defineComparators4[2];\n\n    return dtA.isAfter(dtB, datePart);\n  }\n\n  function lt(a, b, unit) {\n    var _defineComparators5 = defineComparators(a, b, unit),\n        _defineComparators6 = _slicedToArray(_defineComparators5, 3),\n        dtA = _defineComparators6[0],\n        dtB = _defineComparators6[1],\n        datePart = _defineComparators6[2];\n\n    return dtA.isBefore(dtB, datePart);\n  }\n\n  function gte(a, b, unit) {\n    var _defineComparators7 = defineComparators(a, b, unit),\n        _defineComparators8 = _slicedToArray(_defineComparators7, 3),\n        dtA = _defineComparators8[0],\n        dtB = _defineComparators8[1],\n        datePart = _defineComparators8[2];\n\n    return dtA.isSameOrBefore(dtB, datePart);\n  }\n\n  function lte(a, b, unit) {\n    var _defineComparators9 = defineComparators(a, b, unit),\n        _defineComparators10 = _slicedToArray(_defineComparators9, 3),\n        dtA = _defineComparators10[0],\n        dtB = _defineComparators10[1],\n        datePart = _defineComparators10[2];\n\n    return dtA.isSameOrBefore(dtB, datePart);\n  }\n\n  function inRange(day, min, max) {\n    var unit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'day';\n    var datePart = fixUnit$1(unit);\n    var mDay = moment(day);\n    var mMin = moment(min);\n    var mMax = moment(max);\n    return mDay.isBetween(mMin, mMax, datePart, '[]');\n  }\n\n  function min(dateA, dateB) {\n    var dtA = moment(dateA);\n    var dtB = moment(dateB);\n    var minDt = moment.min(dtA, dtB);\n    return minDt.toDate();\n  }\n\n  function max(dateA, dateB) {\n    var dtA = moment(dateA);\n    var dtB = moment(dateB);\n    var maxDt = moment.max(dtA, dtB);\n    return maxDt.toDate();\n  }\n\n  function merge(date, time) {\n    if (!date && !time) return null;\n    var tm = moment(time).format('HH:mm:ss');\n    var dt = moment(date).startOf('day').format('MM/DD/YYYY'); // We do it this way to avoid issues when timezone switching\n\n    return moment(\"\".concat(dt, \" \").concat(tm), 'MM/DD/YYYY HH:mm:ss').toDate();\n  }\n\n  function add(date, adder, unit) {\n    var datePart = fixUnit$1(unit);\n    return moment(date).add(adder, datePart).toDate();\n  }\n\n  function range(start, end) {\n    var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'day';\n    var datePart = fixUnit$1(unit); // because the add method will put these in tz, we have to start that way\n\n    var current = moment(start).toDate();\n    var days = [];\n\n    while (lte(current, end)) {\n      days.push(current);\n      current = add(current, 1, datePart);\n    }\n\n    return days;\n  }\n\n  function ceil(date, unit) {\n    var datePart = fixUnit$1(unit);\n    var floor = startOf(date, datePart);\n    return eq(floor, date) ? floor : add(floor, 1, datePart);\n  }\n\n  function diff(a, b) {\n    var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'day';\n    var datePart = fixUnit$1(unit); // don't use 'defineComparators' here, as we don't want to mutate the values\n\n    var dtA = moment(a);\n    var dtB = moment(b);\n    return dtB.diff(dtA, datePart);\n  }\n\n  function minutes(date) {\n    var dt = moment(date);\n    return dt.minutes();\n  }\n\n  function firstOfWeek(culture) {\n    var data = culture ? moment.localeData(culture) : moment.localeData();\n    return data ? data.firstDayOfWeek() : 0;\n  }\n\n  function firstVisibleDay(date) {\n    return moment(date).startOf('month').startOf('week').toDate();\n  }\n\n  function lastVisibleDay(date) {\n    return moment(date).endOf('month').endOf('week').toDate();\n  }\n\n  function visibleDays(date) {\n    var current = firstVisibleDay(date);\n    var last = lastVisibleDay(date);\n    var days = [];\n\n    while (lte(current, last)) {\n      days.push(current);\n      current = add(current, 1, 'd');\n    }\n\n    return days;\n  }\n  /*** END localized date arithmetic methods with moment ***/\n\n  /**\n   * Moved from TimeSlots.js, this method overrides the method of the same name\n   * in the localizer.js, using moment to construct the js Date\n   * @param {Date} dt - date to start with\n   * @param {Number} minutesFromMidnight\n   * @param {Number} offset\n   * @returns {Date}\n   */\n\n\n  function getSlotDate(dt, minutesFromMidnight, offset) {\n    return moment(dt).startOf('day').minute(minutesFromMidnight + offset).toDate();\n  } // moment will automatically handle DST differences in it's calculations\n\n\n  function getTotalMin(start, end) {\n    return diff(start, end, 'minutes');\n  }\n\n  function getMinutesFromMidnight(start) {\n    var dayStart = moment(start).startOf('day');\n    var day = moment(start);\n    return day.diff(dayStart, 'minutes') + getDayStartDstOffset(start);\n  } // These two are used by DateSlotMetrics\n\n\n  function continuesPrior(start, first) {\n    var mStart = moment(start);\n    var mFirst = moment(first);\n    return mStart.isBefore(mFirst, 'day');\n  }\n\n  function continuesAfter(start, end, last) {\n    var mEnd = moment(end);\n    var mLast = moment(last);\n    return mEnd.isSameOrAfter(mLast, 'minutes');\n  } // These two are used by eventLevels\n\n\n  function sortEvents(_ref6) {\n    var _ref6$evtA = _ref6.evtA,\n        aStart = _ref6$evtA.start,\n        aEnd = _ref6$evtA.end,\n        aAllDay = _ref6$evtA.allDay,\n        _ref6$evtB = _ref6.evtB,\n        bStart = _ref6$evtB.start,\n        bEnd = _ref6$evtB.end,\n        bAllDay = _ref6$evtB.allDay;\n    var startSort = +startOf(aStart, 'day') - +startOf(bStart, 'day');\n    var durA = diff(aStart, ceil(aEnd, 'day'), 'day');\n    var durB = diff(bStart, ceil(bEnd, 'day'), 'day');\n    return startSort || // sort by start Day first\n    Math.max(durB, 1) - Math.max(durA, 1) || // events spanning multiple days go first\n    !!bAllDay - !!aAllDay || // then allDay single day events\n    +aStart - +bStart || // then sort by start time *don't need moment conversion here\n    +aEnd - +bEnd // then sort by end time *don't need moment conversion here either\n    ;\n  }\n\n  function inEventRange(_ref7) {\n    var _ref7$event = _ref7.event,\n        start = _ref7$event.start,\n        end = _ref7$event.end,\n        _ref7$range = _ref7.range,\n        rangeStart = _ref7$range.start,\n        rangeEnd = _ref7$range.end;\n    var startOfDay = moment(start).startOf('day');\n    var eEnd = moment(end);\n    var rStart = moment(rangeStart);\n    var rEnd = moment(rangeEnd);\n    var startsBeforeEnd = startOfDay.isSameOrBefore(rEnd, 'day'); // when the event is zero duration we need to handle a bit differently\n\n    var sameMin = !startOfDay.isSame(eEnd, 'minutes');\n    var endsAfterStart = sameMin ? eEnd.isAfter(rStart, 'minutes') : eEnd.isSameOrAfter(rStart, 'minutes');\n    return startsBeforeEnd && endsAfterStart;\n  } // moment treats 'day' and 'date' equality very different\n  // moment(date1).isSame(date2, 'day') would test that they were both the same day of the week\n  // moment(date1).isSame(date2, 'date') would test that they were both the same date of the month of the year\n\n\n  function isSameDate(date1, date2) {\n    var dt = moment(date1);\n    var dt2 = moment(date2);\n    return dt.isSame(dt2, 'date');\n  }\n  /**\n   * This method, called once in the localizer constructor, is used by eventLevels\n   * 'eventSegments()' to assist in determining the 'span' of the event in the display,\n   * specifically when using a timezone that is greater than the browser native timezone.\n   * @returns number\n   */\n\n\n  function browserTZOffset() {\n    /**\n     * Date.prototype.getTimezoneOffset horrifically flips the positive/negative from\n     * what you see in it's string, so we have to jump through some hoops to get a value\n     * we can actually compare.\n     */\n    var dt = new Date();\n    var neg = /-/.test(dt.toString()) ? '-' : '';\n    var dtOffset = dt.getTimezoneOffset();\n    var comparator = Number(\"\".concat(neg).concat(Math.abs(dtOffset))); // moment correctly provides positive/negative offset, as expected\n\n    var mtOffset = moment().utcOffset();\n    return mtOffset > comparator ? 1 : 0;\n  }\n\n  return new DateLocalizer({\n    formats: formats$4,\n    firstOfWeek: firstOfWeek,\n    firstVisibleDay: firstVisibleDay,\n    lastVisibleDay: lastVisibleDay,\n    visibleDays: visibleDays,\n    format: function format(value, _format, culture) {\n      return locale(moment(value), culture).format(_format);\n    },\n    lt: lt,\n    lte: lte,\n    gt: gt,\n    gte: gte,\n    eq: eq,\n    neq: neq,\n    merge: merge,\n    inRange: inRange,\n    startOf: startOf,\n    endOf: endOf,\n    range: range,\n    add: add,\n    diff: diff,\n    ceil: ceil,\n    min: min,\n    max: max,\n    minutes: minutes,\n    getSlotDate: getSlotDate,\n    getTimezoneOffset: getTimezoneOffset,\n    getDstOffset: getDstOffset,\n    getTotalMin: getTotalMin,\n    getMinutesFromMidnight: getMinutesFromMidnight,\n    continuesPrior: continuesPrior,\n    continuesAfter: continuesAfter,\n    sortEvents: sortEvents,\n    inEventRange: inEventRange,\n    isSameDate: isSameDate,\n    browserTZOffset: browserTZOffset\n  });\n}\n\nfunction pluralizeUnit(unit) {\n  return /s$/.test(unit) ? unit : unit + 's';\n}\n\nvar weekRangeFormat$3 = function weekRangeFormat(_ref, culture, local) {\n  var start = _ref.start,\n      end = _ref.end;\n  return local.format(start, 'MMMM dd', culture) + ' – ' + // updated to use this localizer 'eq()' method\n  local.format(end, local.eq(start, end, 'month') ? 'dd' : 'MMMM dd', culture);\n};\n\nvar dateRangeFormat$3 = function dateRangeFormat(_ref2, culture, local) {\n  var start = _ref2.start,\n      end = _ref2.end;\n  return local.format(start, 'D', culture) + ' – ' + local.format(end, 'D', culture);\n};\n\nvar timeRangeFormat$3 = function timeRangeFormat(_ref3, culture, local) {\n  var start = _ref3.start,\n      end = _ref3.end;\n  return local.format(start, 't', culture) + ' – ' + local.format(end, 't', culture);\n};\n\nvar timeRangeStartFormat$3 = function timeRangeStartFormat(_ref4, culture, local) {\n  var start = _ref4.start;\n  return local.format(start, 't', culture) + ' – ';\n};\n\nvar timeRangeEndFormat$3 = function timeRangeEndFormat(_ref5, culture, local) {\n  var end = _ref5.end;\n  return ' – ' + local.format(end, 't', culture);\n};\n\nvar formats$3 = {\n  dateFormat: 'dd',\n  dayFormat: 'dd EEE',\n  weekdayFormat: 'EEE',\n  selectRangeFormat: timeRangeFormat$3,\n  eventTimeRangeFormat: timeRangeFormat$3,\n  eventTimeRangeStartFormat: timeRangeStartFormat$3,\n  eventTimeRangeEndFormat: timeRangeEndFormat$3,\n  timeGutterFormat: 't',\n  monthHeaderFormat: 'MMMM yyyy',\n  dayHeaderFormat: 'EEEE MMM dd',\n  dayRangeHeaderFormat: weekRangeFormat$3,\n  agendaHeaderFormat: dateRangeFormat$3,\n  agendaDateFormat: 'EEE MMM dd',\n  agendaTimeFormat: 't',\n  agendaTimeRangeFormat: timeRangeFormat$3\n};\n\nfunction fixUnit(unit) {\n  var datePart = unit ? pluralizeUnit(unit.toLowerCase()) : unit;\n\n  if (datePart === 'FullYear') {\n    datePart = 'year';\n  } else if (!datePart) {\n    datePart = undefined;\n  }\n\n  return datePart;\n} // Luxon does not currently have weekInfo by culture\n// Luxon uses 1 based values for month and weekday\n// So we default to Sunday (7)\n\n\nfunction luxon(DateTime) {\n  var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref6$firstDayOfWeek = _ref6.firstDayOfWeek,\n      firstDayOfWeek = _ref6$firstDayOfWeek === void 0 ? 7 : _ref6$firstDayOfWeek;\n\n  function formatDate(value, format) {\n    return DateTime.fromJSDate(value).toFormat(format);\n  }\n\n  function formatDateWithCulture(value, culture, format) {\n    return DateTime.fromJSDate(value).setLocale(culture).toFormat(format);\n  }\n  /*** BEGIN localized date arithmetic methods with Luxon ***/\n\n\n  function defineComparators(a, b, unit) {\n    var datePart = fixUnit(unit);\n    var dtA = datePart ? DateTime.fromJSDate(a).startOf(datePart) : DateTime.fromJSDate(a);\n    var dtB = datePart ? DateTime.fromJSDate(b).startOf(datePart) : DateTime.fromJSDate(b);\n    return [dtA, dtB, datePart];\n  } // Since Luxon (and current Intl API) has no support\n  // for culture based weekInfo, we need to handle\n  // the start of the week differently\n  // depending on locale, the firstDayOfWeek could also be Saturday, Sunday or Monday\n\n\n  function startOfDTWeek(dtObj) {\n    var weekday = dtObj.weekday;\n\n    if (weekday === firstDayOfWeek) {\n      return dtObj.startOf('day'); // already beginning of week\n    } else if (firstDayOfWeek === 1) {\n      return dtObj.startOf('week'); // fow is Monday, which is Luxon default\n    }\n\n    var diff = firstDayOfWeek === 7 ? weekday : weekday + (7 - firstDayOfWeek);\n    return dtObj.minus({\n      day: diff\n    }).startOf('day');\n  }\n\n  function endOfDTWeek(dtObj) {\n    var weekday = dtObj.weekday;\n    var eow = firstDayOfWeek === 1 ? 7 : firstDayOfWeek - 1;\n\n    if (weekday === eow) {\n      return dtObj.endOf('day'); // already last day of the week\n    } else if (firstDayOfWeek === 1) {\n      return dtObj.endOf('week'); // use Luxon default (Sunday)\n    }\n\n    var fromDate = firstDayOfWeek > eow ? dtObj.plus({\n      day: firstDayOfWeek - eow\n    }) : dtObj;\n    return fromDate.set({\n      weekday: eow\n    }).endOf('day');\n  } // This returns a DateTime instance\n\n\n  function startOfDT() {\n    var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n    var unit = arguments.length > 1 ? arguments[1] : undefined;\n    var datePart = fixUnit(unit);\n\n    if (datePart) {\n      var dt = DateTime.fromJSDate(date);\n      return datePart.includes('week') ? startOfDTWeek(dt) : dt.startOf(datePart);\n    }\n\n    return DateTime.fromJSDate(date);\n  }\n\n  function firstOfWeek() {\n    return firstDayOfWeek;\n  } // This returns a JS Date from a DateTime instance\n\n\n  function startOf() {\n    var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n    var unit = arguments.length > 1 ? arguments[1] : undefined;\n    return startOfDT(date, unit).toJSDate();\n  } // This returns a DateTime instance\n\n\n  function endOfDT() {\n    var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n    var unit = arguments.length > 1 ? arguments[1] : undefined;\n    var datePart = fixUnit(unit);\n\n    if (datePart) {\n      var dt = DateTime.fromJSDate(date);\n      return datePart.includes('week') ? endOfDTWeek(dt) : dt.endOf(datePart);\n    }\n\n    return DateTime.fromJSDate(date);\n  }\n\n  function endOf() {\n    var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n    var unit = arguments.length > 1 ? arguments[1] : undefined;\n    return endOfDT(date, unit).toJSDate();\n  }\n\n  function eq(a, b, unit) {\n    var _defineComparators = defineComparators(a, b, unit),\n        _defineComparators2 = _slicedToArray(_defineComparators, 2),\n        dtA = _defineComparators2[0],\n        dtB = _defineComparators2[1];\n\n    return +dtA == +dtB;\n  }\n\n  function neq(a, b, unit) {\n    return !eq(a, b, unit);\n  }\n\n  function gt(a, b, unit) {\n    var _defineComparators3 = defineComparators(a, b, unit),\n        _defineComparators4 = _slicedToArray(_defineComparators3, 2),\n        dtA = _defineComparators4[0],\n        dtB = _defineComparators4[1];\n\n    return +dtA > +dtB;\n  }\n\n  function lt(a, b, unit) {\n    var _defineComparators5 = defineComparators(a, b, unit),\n        _defineComparators6 = _slicedToArray(_defineComparators5, 2),\n        dtA = _defineComparators6[0],\n        dtB = _defineComparators6[1];\n\n    return +dtA < +dtB;\n  }\n\n  function gte(a, b, unit) {\n    var _defineComparators7 = defineComparators(a, b, unit),\n        _defineComparators8 = _slicedToArray(_defineComparators7, 2),\n        dtA = _defineComparators8[0],\n        dtB = _defineComparators8[1];\n\n    return +dtA >= +dtB;\n  }\n\n  function lte(a, b, unit) {\n    var _defineComparators9 = defineComparators(a, b, unit),\n        _defineComparators10 = _slicedToArray(_defineComparators9, 2),\n        dtA = _defineComparators10[0],\n        dtB = _defineComparators10[1];\n\n    return +dtA <= +dtB;\n  }\n\n  function inRange(day, min, max) {\n    var unit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'day';\n    var datePart = fixUnit(unit);\n    var mDay = startOfDT(day, datePart);\n    var mMin = startOfDT(min, datePart);\n    var mMax = startOfDT(max, datePart);\n    return +mDay >= +mMin && +mDay <= +mMax;\n  }\n\n  function min(dateA, dateB) {\n    var dtA = DateTime.fromJSDate(dateA);\n    var dtB = DateTime.fromJSDate(dateB);\n    var minDt = DateTime.min(dtA, dtB);\n    return minDt.toJSDate();\n  }\n\n  function max(dateA, dateB) {\n    var dtA = DateTime.fromJSDate(dateA);\n    var dtB = DateTime.fromJSDate(dateB);\n    var maxDt = DateTime.max(dtA, dtB);\n    return maxDt.toJSDate();\n  }\n\n  function merge(date, time) {\n    if (!date && !time) return null;\n    var tm = DateTime.fromJSDate(time);\n    var dt = startOfDT(date, 'day');\n    return dt.set({\n      hour: tm.hour,\n      minute: tm.minute,\n      second: tm.second,\n      millisecond: tm.millisecond\n    }).toJSDate();\n  }\n\n  function add(date, adder, unit) {\n    var datePart = fixUnit(unit);\n    return DateTime.fromJSDate(date).plus(_defineProperty({}, datePart, adder)).toJSDate();\n  }\n\n  function range(start, end) {\n    var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'day';\n    var datePart = fixUnit(unit);\n    var current = DateTime.fromJSDate(start).toJSDate(); // this is to get it to tz\n\n    var days = [];\n\n    while (lte(current, end)) {\n      days.push(current);\n      current = add(current, 1, datePart);\n    }\n\n    return days;\n  }\n\n  function ceil(date, unit) {\n    var datePart = fixUnit(unit);\n    var floor = startOf(date, datePart);\n    return eq(floor, date) ? floor : add(floor, 1, datePart);\n  }\n\n  function diff(a, b) {\n    var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'day';\n    var datePart = fixUnit(unit); // don't use 'defineComparators' here, as we don't want to mutate the values\n\n    var dtA = DateTime.fromJSDate(a);\n    var dtB = DateTime.fromJSDate(b);\n    return Math.round(dtB.diff(dtA, datePart, {\n      conversionAccuracy: 'longterm'\n    }).toObject()[datePart]);\n  }\n\n  function firstVisibleDay(date) {\n    var startOfMonth = startOfDT(date, 'month');\n    return startOfDTWeek(startOfMonth).toJSDate();\n  }\n\n  function lastVisibleDay(date) {\n    var endOfMonth = endOfDT(date, 'month');\n    return endOfDTWeek(endOfMonth).toJSDate();\n  }\n\n  function visibleDays(date) {\n    var current = firstVisibleDay(date);\n    var last = lastVisibleDay(date);\n    var days = [];\n\n    while (lte(current, last)) {\n      days.push(current);\n      current = add(current, 1, 'day');\n    }\n\n    return days;\n  }\n  /*** END localized date arithmetic methods with moment ***/\n\n  /**\n   * Moved from TimeSlots.js, this method overrides the method of the same name\n   * in the localizer.js, using moment to construct the js Date\n   * @param {Date} dt - date to start with\n   * @param {Number} minutesFromMidnight\n   * @param {Number} offset\n   * @returns {Date}\n   */\n\n\n  function getSlotDate(dt, minutesFromMidnight, offset) {\n    return startOfDT(dt, 'day').set({\n      minutes: minutesFromMidnight + offset\n    }).toJSDate();\n  } // Luxon will automatically handle DST differences in it's calculations\n\n\n  function getTotalMin(start, end) {\n    return diff(start, end, 'minutes');\n  }\n\n  function getMinutesFromMidnight(start) {\n    var dayStart = startOfDT(start, 'day');\n    var day = DateTime.fromJSDate(start);\n    return Math.round(day.diff(dayStart, 'minutes', {\n      conversionAccuracy: 'longterm'\n    }).toObject().minutes);\n  } // These two are used by DateSlotMetrics\n\n\n  function continuesPrior(start, first) {\n    return lt(start, first);\n  }\n\n  function continuesAfter(start, end, last) {\n    return gte(end, last);\n  } // These two are used by eventLevels\n\n\n  function sortEvents(_ref7) {\n    var _ref7$evtA = _ref7.evtA,\n        aStart = _ref7$evtA.start,\n        aEnd = _ref7$evtA.end,\n        aAllDay = _ref7$evtA.allDay,\n        _ref7$evtB = _ref7.evtB,\n        bStart = _ref7$evtB.start,\n        bEnd = _ref7$evtB.end,\n        bAllDay = _ref7$evtB.allDay;\n    var startSort = +startOf(aStart, 'day') - +startOf(bStart, 'day');\n    var durA = diff(aStart, ceil(aEnd, 'day'), 'day');\n    var durB = diff(bStart, ceil(bEnd, 'day'), 'day');\n    return startSort || // sort by start Day first\n    Math.max(durB, 1) - Math.max(durA, 1) || // events spanning multiple days go first\n    !!bAllDay - !!aAllDay || // then allDay single day events\n    +aStart - +bStart || // then sort by start time *don't need moment conversion here\n    +aEnd - +bEnd // then sort by end time *don't need moment conversion here either\n    ;\n  }\n\n  function inEventRange(_ref8) {\n    var _ref8$event = _ref8.event,\n        start = _ref8$event.start,\n        end = _ref8$event.end,\n        _ref8$range = _ref8.range,\n        rangeStart = _ref8$range.start,\n        rangeEnd = _ref8$range.end;\n    var eStart = startOf(start, 'day');\n    var startsBeforeEnd = lte(eStart, rangeEnd, 'day'); // when the event is zero duration we need to handle a bit differently\n\n    var sameMin = neq(eStart, end, 'minutes');\n    var endsAfterStart = sameMin ? gt(end, rangeStart, 'minutes') : gte(end, rangeStart, 'minutes');\n    return startsBeforeEnd && endsAfterStart;\n  } // moment treats 'day' and 'date' equality very different\n  // moment(date1).isSame(date2, 'day') would test that they were both the same day of the week\n  // moment(date1).isSame(date2, 'date') would test that they were both the same date of the month of the year\n\n\n  function isSameDate(date1, date2) {\n    var dt = DateTime.fromJSDate(date1);\n    var dt2 = DateTime.fromJSDate(date2);\n    return dt.hasSame(dt2, 'day');\n  }\n  /**\n   * This method, called once in the localizer constructor, is used by eventLevels\n   * 'eventSegments()' to assist in determining the 'span' of the event in the display,\n   * specifically when using a timezone that is greater than the browser native timezone.\n   * @returns number\n   */\n\n\n  function browserTZOffset() {\n    /**\n     * Date.prototype.getTimezoneOffset horrifically flips the positive/negative from\n     * what you see in it's string, so we have to jump through some hoops to get a value\n     * we can actually compare.\n     */\n    var dt = new Date();\n    var neg = /-/.test(dt.toString()) ? '-' : '';\n    var dtOffset = dt.getTimezoneOffset();\n    var comparator = Number(\"\".concat(neg).concat(Math.abs(dtOffset))); // moment correctly provides positive/negative offset, as expected\n\n    var mtOffset = DateTime.local().offset;\n    return mtOffset > comparator ? 1 : 0;\n  }\n\n  return new DateLocalizer({\n    format: function format(value, _format, culture) {\n      if (culture) {\n        return formatDateWithCulture(value, culture, _format);\n      }\n\n      return formatDate(value, _format);\n    },\n    formats: formats$3,\n    firstOfWeek: firstOfWeek,\n    firstVisibleDay: firstVisibleDay,\n    lastVisibleDay: lastVisibleDay,\n    visibleDays: visibleDays,\n    lt: lt,\n    lte: lte,\n    gt: gt,\n    gte: gte,\n    eq: eq,\n    neq: neq,\n    merge: merge,\n    inRange: inRange,\n    startOf: startOf,\n    endOf: endOf,\n    range: range,\n    add: add,\n    diff: diff,\n    ceil: ceil,\n    min: min,\n    max: max,\n    getSlotDate: getSlotDate,\n    getTotalMin: getTotalMin,\n    getMinutesFromMidnight: getMinutesFromMidnight,\n    continuesPrior: continuesPrior,\n    continuesAfter: continuesAfter,\n    sortEvents: sortEvents,\n    inEventRange: inEventRange,\n    isSameDate: isSameDate,\n    browserTZOffset: browserTZOffset\n  });\n}\n\nvar dateRangeFormat$2 = function dateRangeFormat(_ref, culture, local) {\n  var start = _ref.start,\n      end = _ref.end;\n  return local.format(start, 'd', culture) + ' – ' + local.format(end, 'd', culture);\n};\n\nvar timeRangeFormat$2 = function timeRangeFormat(_ref2, culture, local) {\n  var start = _ref2.start,\n      end = _ref2.end;\n  return local.format(start, 't', culture) + ' – ' + local.format(end, 't', culture);\n};\n\nvar timeRangeStartFormat$2 = function timeRangeStartFormat(_ref3, culture, local) {\n  var start = _ref3.start;\n  return local.format(start, 't', culture) + ' – ';\n};\n\nvar timeRangeEndFormat$2 = function timeRangeEndFormat(_ref4, culture, local) {\n  var end = _ref4.end;\n  return ' – ' + local.format(end, 't', culture);\n};\n\nvar weekRangeFormat$2 = function weekRangeFormat(_ref5, culture, local) {\n  var start = _ref5.start,\n      end = _ref5.end;\n  return local.format(start, 'MMM dd', culture) + ' – ' + local.format(end, eq(start, end, 'month') ? 'dd' : 'MMM dd', culture);\n};\n\nvar formats$2 = {\n  dateFormat: 'dd',\n  dayFormat: 'ddd dd/MM',\n  weekdayFormat: 'ddd',\n  selectRangeFormat: timeRangeFormat$2,\n  eventTimeRangeFormat: timeRangeFormat$2,\n  eventTimeRangeStartFormat: timeRangeStartFormat$2,\n  eventTimeRangeEndFormat: timeRangeEndFormat$2,\n  timeGutterFormat: 't',\n  monthHeaderFormat: 'Y',\n  dayHeaderFormat: 'dddd MMM dd',\n  dayRangeHeaderFormat: weekRangeFormat$2,\n  agendaHeaderFormat: dateRangeFormat$2,\n  agendaDateFormat: 'ddd MMM dd',\n  agendaTimeFormat: 't',\n  agendaTimeRangeFormat: timeRangeFormat$2\n};\n\nfunction oldGlobalize(globalize) {\n  function getCulture(culture) {\n    return culture ? globalize.findClosestCulture(culture) : globalize.culture();\n  }\n\n  function firstOfWeek(culture) {\n    culture = getCulture(culture);\n    return culture && culture.calendar.firstDay || 0;\n  }\n\n  return new DateLocalizer({\n    firstOfWeek: firstOfWeek,\n    formats: formats$2,\n    format: function format(value, _format, culture) {\n      return globalize.format(value, _format, culture);\n    }\n  });\n}\n\nvar dateRangeFormat$1 = function dateRangeFormat(_ref, culture, local) {\n  var start = _ref.start,\n      end = _ref.end;\n  return local.format(start, {\n    date: 'short'\n  }, culture) + ' – ' + local.format(end, {\n    date: 'short'\n  }, culture);\n};\n\nvar timeRangeFormat$1 = function timeRangeFormat(_ref2, culture, local) {\n  var start = _ref2.start,\n      end = _ref2.end;\n  return local.format(start, {\n    time: 'short'\n  }, culture) + ' – ' + local.format(end, {\n    time: 'short'\n  }, culture);\n};\n\nvar timeRangeStartFormat$1 = function timeRangeStartFormat(_ref3, culture, local) {\n  var start = _ref3.start;\n  return local.format(start, {\n    time: 'short'\n  }, culture) + ' – ';\n};\n\nvar timeRangeEndFormat$1 = function timeRangeEndFormat(_ref4, culture, local) {\n  var end = _ref4.end;\n  return ' – ' + local.format(end, {\n    time: 'short'\n  }, culture);\n};\n\nvar weekRangeFormat$1 = function weekRangeFormat(_ref5, culture, local) {\n  var start = _ref5.start,\n      end = _ref5.end;\n  return local.format(start, 'MMM dd', culture) + ' – ' + local.format(end, eq(start, end, 'month') ? 'dd' : 'MMM dd', culture);\n};\n\nvar formats$1 = {\n  dateFormat: 'dd',\n  dayFormat: 'eee dd/MM',\n  weekdayFormat: 'eee',\n  selectRangeFormat: timeRangeFormat$1,\n  eventTimeRangeFormat: timeRangeFormat$1,\n  eventTimeRangeStartFormat: timeRangeStartFormat$1,\n  eventTimeRangeEndFormat: timeRangeEndFormat$1,\n  timeGutterFormat: {\n    time: 'short'\n  },\n  monthHeaderFormat: 'MMMM yyyy',\n  dayHeaderFormat: 'eeee MMM dd',\n  dayRangeHeaderFormat: weekRangeFormat$1,\n  agendaHeaderFormat: dateRangeFormat$1,\n  agendaDateFormat: 'eee MMM dd',\n  agendaTimeFormat: {\n    time: 'short'\n  },\n  agendaTimeRangeFormat: timeRangeFormat$1\n};\n\nfunction globalize(globalize) {\n  var locale = function locale(culture) {\n    return culture ? globalize(culture) : globalize;\n  }; // return the first day of the week from the locale data. Defaults to 'world'\n  // territory if no territory is derivable from CLDR.\n  // Failing to use CLDR supplemental (not loaded?), revert to the original\n  // method of getting first day of week.\n\n\n  function firstOfWeek(culture) {\n    try {\n      var days = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\n      var cldr = locale(culture).cldr;\n      var territory = cldr.attributes.territory;\n      var weekData = cldr.get('supplemental').weekData;\n      var firstDay = weekData.firstDay[territory || '001'];\n      return days.indexOf(firstDay);\n    } catch (e) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('Failed to accurately determine first day of the week.' + ' Is supplemental data loaded into CLDR?');\n      } // maybe cldr supplemental is not loaded? revert to original method\n\n\n      var date = new Date(); //cldr-data doesn't seem to be zero based\n\n      var localeDay = Math.max(parseInt(locale(culture).formatDate(date, {\n        raw: 'e'\n      }), 10) - 1, 0);\n      return Math.abs(date.getDay() - localeDay);\n    }\n  }\n\n  if (!globalize.load) return oldGlobalize(globalize);\n  return new DateLocalizer({\n    firstOfWeek: firstOfWeek,\n    formats: formats$1,\n    format: function format(value, _format, culture) {\n      _format = typeof _format === 'string' ? {\n        raw: _format\n      } : _format;\n      return locale(culture).formatDate(value, _format);\n    }\n  });\n}\n\nvar dateRangeFormat = function dateRangeFormat(_ref, culture, local) {\n  var start = _ref.start,\n      end = _ref.end;\n  return \"\".concat(local.format(start, 'P', culture), \" \\u2013 \").concat(local.format(end, 'P', culture));\n};\n\nvar timeRangeFormat = function timeRangeFormat(_ref2, culture, local) {\n  var start = _ref2.start,\n      end = _ref2.end;\n  return \"\".concat(local.format(start, 'p', culture), \" \\u2013 \").concat(local.format(end, 'p', culture));\n};\n\nvar timeRangeStartFormat = function timeRangeStartFormat(_ref3, culture, local) {\n  var start = _ref3.start;\n  return \"\".concat(local.format(start, 'h:mma', culture), \" \\u2013 \");\n};\n\nvar timeRangeEndFormat = function timeRangeEndFormat(_ref4, culture, local) {\n  var end = _ref4.end;\n  return \" \\u2013 \".concat(local.format(end, 'h:mma', culture));\n};\n\nvar weekRangeFormat = function weekRangeFormat(_ref5, culture, local) {\n  var start = _ref5.start,\n      end = _ref5.end;\n  return \"\".concat(local.format(start, 'MMMM dd', culture), \" \\u2013 \").concat(local.format(end, eq(start, end, 'month') ? 'dd' : 'MMMM dd', culture));\n};\n\nvar formats = {\n  dateFormat: 'dd',\n  dayFormat: 'dd eee',\n  weekdayFormat: 'cccc',\n  selectRangeFormat: timeRangeFormat,\n  eventTimeRangeFormat: timeRangeFormat,\n  eventTimeRangeStartFormat: timeRangeStartFormat,\n  eventTimeRangeEndFormat: timeRangeEndFormat,\n  timeGutterFormat: 'p',\n  monthHeaderFormat: 'MMMM yyyy',\n  dayHeaderFormat: 'cccc MMM dd',\n  dayRangeHeaderFormat: weekRangeFormat,\n  agendaHeaderFormat: dateRangeFormat,\n  agendaDateFormat: 'ccc MMM dd',\n  agendaTimeFormat: 'p',\n  agendaTimeRangeFormat: timeRangeFormat\n};\n\nvar dateFnsLocalizer = function dateFnsLocalizer(_ref6) {\n  var startOfWeek = _ref6.startOfWeek,\n      getDay = _ref6.getDay,\n      _format = _ref6.format,\n      locales = _ref6.locales;\n  return new DateLocalizer({\n    formats: formats,\n    firstOfWeek: function firstOfWeek(culture) {\n      return getDay(startOfWeek(new Date(), {\n        locale: locales[culture]\n      }));\n    },\n    format: function format(value, formatString, culture) {\n      return _format(new Date(value), formatString, {\n        locale: locales[culture]\n      });\n    }\n  });\n};\n\nvar components = {\n  eventWrapper: NoopWrapper,\n  timeSlotWrapper: NoopWrapper,\n  dateCellWrapper: NoopWrapper\n};\nexport { Calendar$1 as Calendar, DateLocalizer, navigate as Navigate, views as Views, components, dateFnsLocalizer, globalize as globalizeLocalizer, luxon as luxonLocalizer, moment as momentLocalizer, moveDate as move };","map":null,"metadata":{},"sourceType":"module"}